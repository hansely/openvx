/*
MIT License

Copyright (c) 2018 - 2022 Advanced Micro Devices, Inc. All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

/* This file is generated by nnir2openvx.py on 2022-11-09T15:32:00.622105-08:00 */

#include "annmodule.h"
#include <VX/vx_khr_nn.h>
#include <VX/vx_compatibility.h>
#include <vx_amd_nn.h>
#include <vx_ext_amd.h>
#include <stdio.h>

#define ERROR_CHECK_OBJECT(obj) { vx_status status = vxGetStatus((vx_reference)(obj)); if(status != VX_SUCCESS) { vxAddLogEntry((vx_reference)context, status     , "ERROR: failed with status = (%d) at " __FILE__ "#%d\n", status, __LINE__); return status; } }
#define ERROR_CHECK_STATUS(call) { vx_status status = (call); if(status != VX_SUCCESS) { vxAddLogEntry((vx_reference)context, status, "ERROR: failed with status = (%d) at " __FILE__ "#%d\n", status, __LINE__); return status; } }

static vx_status initializeTensor(vx_context context, vx_tensor tensor, FILE * fp, const char * binaryFilename)
{
    vx_enum data_type = VX_TYPE_FLOAT32;
    vx_size num_of_dims = 4, dims[4] = { 1, 1, 1, 1 }, stride[4];
    ERROR_CHECK_STATUS(vxQueryTensor(tensor, VX_TENSOR_DATA_TYPE, &data_type, sizeof(vx_enum)));
    ERROR_CHECK_STATUS(vxQueryTensor(tensor, VX_TENSOR_NUMBER_OF_DIMS, &num_of_dims, sizeof(vx_size)));
    ERROR_CHECK_STATUS(vxQueryTensor(tensor, VX_TENSOR_DIMS, &dims, num_of_dims * sizeof(vx_size)));
    vx_size itemsize = sizeof(float);
    if(data_type == VX_TYPE_UINT8 || data_type == VX_TYPE_INT8) {
        itemsize = sizeof(vx_uint8);
    }
    else if(data_type == VX_TYPE_UINT16 || data_type == VX_TYPE_INT16 || data_type == VX_TYPE_FLOAT16) {
        itemsize = sizeof(vx_uint16);
    }
    else if(data_type == VX_TYPE_INT64) {
        itemsize = sizeof(vx_int64);
    }
    vx_size count = dims[0] * dims[1] * dims[2] * dims[3];

    vx_uint32 h[2] = { 0 };
    fread(h, 1, sizeof(h), fp);
    if(h[0] != 0xf00dd1e1 || (vx_size)h[1] != (count*itemsize)) {
      vxAddLogEntry((vx_reference)tensor, VX_FAILURE, "ERROR: invalid data (magic,size)=(0x%x,%d) in %%s at byte position %d -- expected size is %ld\n", h[0], h[1], binaryFilename, ftell(fp)-sizeof(h), count*itemsize);
      return VX_FAILURE;
    }

    vx_map_id map_id;
    void * ptr;
    ERROR_CHECK_STATUS(vxMapTensorPatch(tensor, num_of_dims, nullptr, nullptr, &map_id, stride, (void **)&ptr, VX_WRITE_ONLY, VX_MEMORY_TYPE_HOST));
    vx_size n = fread(ptr, itemsize, count, fp);
    if(n != count) {
        vxAddLogEntry((vx_reference)tensor, VX_FAILURE, "ERROR: expected char[%ld], but got char[%ld] in %s\n", count*itemsize, n*itemsize, binaryFilename);
        return VX_FAILURE;
    }
    ERROR_CHECK_STATUS(vxUnmapTensorPatch(tensor, map_id));

    return VX_SUCCESS;
}
VX_API_ENTRY vx_status VX_API_CALL annAddToGraph(vx_graph graph, vx_tensor data, vx_tensor prob, const char * binaryFilename)
{
    vx_context context = vxGetContext((vx_reference)graph);
    ERROR_CHECK_OBJECT(context);
    ERROR_CHECK_STATUS(vxLoadKernels(context, "vx_nn"));

    // create variables
    vx_size dims_conv1_w[4] = { 7, 7, 3, 64 };
    vx_tensor conv1_w = vxCreateTensor(context, 4, dims_conv1_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv1_w);
    vx_size dims_conv1_b[2] = { 64, 1 };
    vx_tensor conv1_b = vxCreateTensor(context, 2, dims_conv1_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv1_b);
    vx_size dims_bn_conv1_w[2] = { 64, 1 };
    vx_tensor bn_conv1_w = vxCreateTensor(context, 2, dims_bn_conv1_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn_conv1_w);
    vx_size dims_bn_conv1_b[2] = { 64, 1 };
    vx_tensor bn_conv1_b = vxCreateTensor(context, 2, dims_bn_conv1_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn_conv1_b);
    vx_size dims_scale_conv1_w[2] = { 64, 1 };
    vx_tensor scale_conv1_w = vxCreateTensor(context, 2, dims_scale_conv1_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale_conv1_w);
    vx_size dims_scale_conv1_b[2] = { 64, 1 };
    vx_tensor scale_conv1_b = vxCreateTensor(context, 2, dims_scale_conv1_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale_conv1_b);
    vx_size dims_res2a_branch1_w[4] = { 1, 1, 64, 256 };
    vx_tensor res2a_branch1_w = vxCreateTensor(context, 4, dims_res2a_branch1_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2a_branch1_w);
    vx_size dims_bn2a_branch1_w[2] = { 256, 1 };
    vx_tensor bn2a_branch1_w = vxCreateTensor(context, 2, dims_bn2a_branch1_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn2a_branch1_w);
    vx_size dims_bn2a_branch1_b[2] = { 256, 1 };
    vx_tensor bn2a_branch1_b = vxCreateTensor(context, 2, dims_bn2a_branch1_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn2a_branch1_b);
    vx_size dims_scale2a_branch1_w[2] = { 256, 1 };
    vx_tensor scale2a_branch1_w = vxCreateTensor(context, 2, dims_scale2a_branch1_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale2a_branch1_w);
    vx_size dims_scale2a_branch1_b[2] = { 256, 1 };
    vx_tensor scale2a_branch1_b = vxCreateTensor(context, 2, dims_scale2a_branch1_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale2a_branch1_b);
    vx_size dims_res2a_branch2a_w[4] = { 1, 1, 64, 64 };
    vx_tensor res2a_branch2a_w = vxCreateTensor(context, 4, dims_res2a_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2a_branch2a_w);
    vx_size dims_bn2a_branch2a_w[2] = { 64, 1 };
    vx_tensor bn2a_branch2a_w = vxCreateTensor(context, 2, dims_bn2a_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn2a_branch2a_w);
    vx_size dims_bn2a_branch2a_b[2] = { 64, 1 };
    vx_tensor bn2a_branch2a_b = vxCreateTensor(context, 2, dims_bn2a_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn2a_branch2a_b);
    vx_size dims_scale2a_branch2a_w[2] = { 64, 1 };
    vx_tensor scale2a_branch2a_w = vxCreateTensor(context, 2, dims_scale2a_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale2a_branch2a_w);
    vx_size dims_scale2a_branch2a_b[2] = { 64, 1 };
    vx_tensor scale2a_branch2a_b = vxCreateTensor(context, 2, dims_scale2a_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale2a_branch2a_b);
    vx_size dims_res2a_branch2b_w[4] = { 3, 3, 64, 64 };
    vx_tensor res2a_branch2b_w = vxCreateTensor(context, 4, dims_res2a_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2a_branch2b_w);
    vx_size dims_bn2a_branch2b_w[2] = { 64, 1 };
    vx_tensor bn2a_branch2b_w = vxCreateTensor(context, 2, dims_bn2a_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn2a_branch2b_w);
    vx_size dims_bn2a_branch2b_b[2] = { 64, 1 };
    vx_tensor bn2a_branch2b_b = vxCreateTensor(context, 2, dims_bn2a_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn2a_branch2b_b);
    vx_size dims_scale2a_branch2b_w[2] = { 64, 1 };
    vx_tensor scale2a_branch2b_w = vxCreateTensor(context, 2, dims_scale2a_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale2a_branch2b_w);
    vx_size dims_scale2a_branch2b_b[2] = { 64, 1 };
    vx_tensor scale2a_branch2b_b = vxCreateTensor(context, 2, dims_scale2a_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale2a_branch2b_b);
    vx_size dims_res2a_branch2c_w[4] = { 1, 1, 64, 256 };
    vx_tensor res2a_branch2c_w = vxCreateTensor(context, 4, dims_res2a_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2a_branch2c_w);
    vx_size dims_bn2a_branch2c_w[2] = { 256, 1 };
    vx_tensor bn2a_branch2c_w = vxCreateTensor(context, 2, dims_bn2a_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn2a_branch2c_w);
    vx_size dims_bn2a_branch2c_b[2] = { 256, 1 };
    vx_tensor bn2a_branch2c_b = vxCreateTensor(context, 2, dims_bn2a_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn2a_branch2c_b);
    vx_size dims_scale2a_branch2c_w[2] = { 256, 1 };
    vx_tensor scale2a_branch2c_w = vxCreateTensor(context, 2, dims_scale2a_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale2a_branch2c_w);
    vx_size dims_scale2a_branch2c_b[2] = { 256, 1 };
    vx_tensor scale2a_branch2c_b = vxCreateTensor(context, 2, dims_scale2a_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale2a_branch2c_b);
    vx_size dims_res2b_branch2a_w[4] = { 1, 1, 256, 64 };
    vx_tensor res2b_branch2a_w = vxCreateTensor(context, 4, dims_res2b_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2b_branch2a_w);
    vx_size dims_bn2b_branch2a_w[2] = { 64, 1 };
    vx_tensor bn2b_branch2a_w = vxCreateTensor(context, 2, dims_bn2b_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn2b_branch2a_w);
    vx_size dims_bn2b_branch2a_b[2] = { 64, 1 };
    vx_tensor bn2b_branch2a_b = vxCreateTensor(context, 2, dims_bn2b_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn2b_branch2a_b);
    vx_size dims_scale2b_branch2a_w[2] = { 64, 1 };
    vx_tensor scale2b_branch2a_w = vxCreateTensor(context, 2, dims_scale2b_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale2b_branch2a_w);
    vx_size dims_scale2b_branch2a_b[2] = { 64, 1 };
    vx_tensor scale2b_branch2a_b = vxCreateTensor(context, 2, dims_scale2b_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale2b_branch2a_b);
    vx_size dims_res2b_branch2b_w[4] = { 3, 3, 64, 64 };
    vx_tensor res2b_branch2b_w = vxCreateTensor(context, 4, dims_res2b_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2b_branch2b_w);
    vx_size dims_bn2b_branch2b_w[2] = { 64, 1 };
    vx_tensor bn2b_branch2b_w = vxCreateTensor(context, 2, dims_bn2b_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn2b_branch2b_w);
    vx_size dims_bn2b_branch2b_b[2] = { 64, 1 };
    vx_tensor bn2b_branch2b_b = vxCreateTensor(context, 2, dims_bn2b_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn2b_branch2b_b);
    vx_size dims_scale2b_branch2b_w[2] = { 64, 1 };
    vx_tensor scale2b_branch2b_w = vxCreateTensor(context, 2, dims_scale2b_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale2b_branch2b_w);
    vx_size dims_scale2b_branch2b_b[2] = { 64, 1 };
    vx_tensor scale2b_branch2b_b = vxCreateTensor(context, 2, dims_scale2b_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale2b_branch2b_b);
    vx_size dims_res2b_branch2c_w[4] = { 1, 1, 64, 256 };
    vx_tensor res2b_branch2c_w = vxCreateTensor(context, 4, dims_res2b_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2b_branch2c_w);
    vx_size dims_bn2b_branch2c_w[2] = { 256, 1 };
    vx_tensor bn2b_branch2c_w = vxCreateTensor(context, 2, dims_bn2b_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn2b_branch2c_w);
    vx_size dims_bn2b_branch2c_b[2] = { 256, 1 };
    vx_tensor bn2b_branch2c_b = vxCreateTensor(context, 2, dims_bn2b_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn2b_branch2c_b);
    vx_size dims_scale2b_branch2c_w[2] = { 256, 1 };
    vx_tensor scale2b_branch2c_w = vxCreateTensor(context, 2, dims_scale2b_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale2b_branch2c_w);
    vx_size dims_scale2b_branch2c_b[2] = { 256, 1 };
    vx_tensor scale2b_branch2c_b = vxCreateTensor(context, 2, dims_scale2b_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale2b_branch2c_b);
    vx_size dims_res2c_branch2a_w[4] = { 1, 1, 256, 64 };
    vx_tensor res2c_branch2a_w = vxCreateTensor(context, 4, dims_res2c_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2c_branch2a_w);
    vx_size dims_bn2c_branch2a_w[2] = { 64, 1 };
    vx_tensor bn2c_branch2a_w = vxCreateTensor(context, 2, dims_bn2c_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn2c_branch2a_w);
    vx_size dims_bn2c_branch2a_b[2] = { 64, 1 };
    vx_tensor bn2c_branch2a_b = vxCreateTensor(context, 2, dims_bn2c_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn2c_branch2a_b);
    vx_size dims_scale2c_branch2a_w[2] = { 64, 1 };
    vx_tensor scale2c_branch2a_w = vxCreateTensor(context, 2, dims_scale2c_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale2c_branch2a_w);
    vx_size dims_scale2c_branch2a_b[2] = { 64, 1 };
    vx_tensor scale2c_branch2a_b = vxCreateTensor(context, 2, dims_scale2c_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale2c_branch2a_b);
    vx_size dims_res2c_branch2b_w[4] = { 3, 3, 64, 64 };
    vx_tensor res2c_branch2b_w = vxCreateTensor(context, 4, dims_res2c_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2c_branch2b_w);
    vx_size dims_bn2c_branch2b_w[2] = { 64, 1 };
    vx_tensor bn2c_branch2b_w = vxCreateTensor(context, 2, dims_bn2c_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn2c_branch2b_w);
    vx_size dims_bn2c_branch2b_b[2] = { 64, 1 };
    vx_tensor bn2c_branch2b_b = vxCreateTensor(context, 2, dims_bn2c_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn2c_branch2b_b);
    vx_size dims_scale2c_branch2b_w[2] = { 64, 1 };
    vx_tensor scale2c_branch2b_w = vxCreateTensor(context, 2, dims_scale2c_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale2c_branch2b_w);
    vx_size dims_scale2c_branch2b_b[2] = { 64, 1 };
    vx_tensor scale2c_branch2b_b = vxCreateTensor(context, 2, dims_scale2c_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale2c_branch2b_b);
    vx_size dims_res2c_branch2c_w[4] = { 1, 1, 64, 256 };
    vx_tensor res2c_branch2c_w = vxCreateTensor(context, 4, dims_res2c_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2c_branch2c_w);
    vx_size dims_bn2c_branch2c_w[2] = { 256, 1 };
    vx_tensor bn2c_branch2c_w = vxCreateTensor(context, 2, dims_bn2c_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn2c_branch2c_w);
    vx_size dims_bn2c_branch2c_b[2] = { 256, 1 };
    vx_tensor bn2c_branch2c_b = vxCreateTensor(context, 2, dims_bn2c_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn2c_branch2c_b);
    vx_size dims_scale2c_branch2c_w[2] = { 256, 1 };
    vx_tensor scale2c_branch2c_w = vxCreateTensor(context, 2, dims_scale2c_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale2c_branch2c_w);
    vx_size dims_scale2c_branch2c_b[2] = { 256, 1 };
    vx_tensor scale2c_branch2c_b = vxCreateTensor(context, 2, dims_scale2c_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale2c_branch2c_b);
    vx_size dims_res3a_branch1_w[4] = { 1, 1, 256, 512 };
    vx_tensor res3a_branch1_w = vxCreateTensor(context, 4, dims_res3a_branch1_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3a_branch1_w);
    vx_size dims_bn3a_branch1_w[2] = { 512, 1 };
    vx_tensor bn3a_branch1_w = vxCreateTensor(context, 2, dims_bn3a_branch1_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn3a_branch1_w);
    vx_size dims_bn3a_branch1_b[2] = { 512, 1 };
    vx_tensor bn3a_branch1_b = vxCreateTensor(context, 2, dims_bn3a_branch1_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn3a_branch1_b);
    vx_size dims_scale3a_branch1_w[2] = { 512, 1 };
    vx_tensor scale3a_branch1_w = vxCreateTensor(context, 2, dims_scale3a_branch1_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3a_branch1_w);
    vx_size dims_scale3a_branch1_b[2] = { 512, 1 };
    vx_tensor scale3a_branch1_b = vxCreateTensor(context, 2, dims_scale3a_branch1_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3a_branch1_b);
    vx_size dims_res3a_branch2a_w[4] = { 1, 1, 256, 128 };
    vx_tensor res3a_branch2a_w = vxCreateTensor(context, 4, dims_res3a_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3a_branch2a_w);
    vx_size dims_bn3a_branch2a_w[2] = { 128, 1 };
    vx_tensor bn3a_branch2a_w = vxCreateTensor(context, 2, dims_bn3a_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn3a_branch2a_w);
    vx_size dims_bn3a_branch2a_b[2] = { 128, 1 };
    vx_tensor bn3a_branch2a_b = vxCreateTensor(context, 2, dims_bn3a_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn3a_branch2a_b);
    vx_size dims_scale3a_branch2a_w[2] = { 128, 1 };
    vx_tensor scale3a_branch2a_w = vxCreateTensor(context, 2, dims_scale3a_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3a_branch2a_w);
    vx_size dims_scale3a_branch2a_b[2] = { 128, 1 };
    vx_tensor scale3a_branch2a_b = vxCreateTensor(context, 2, dims_scale3a_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3a_branch2a_b);
    vx_size dims_res3a_branch2b_w[4] = { 3, 3, 128, 128 };
    vx_tensor res3a_branch2b_w = vxCreateTensor(context, 4, dims_res3a_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3a_branch2b_w);
    vx_size dims_bn3a_branch2b_w[2] = { 128, 1 };
    vx_tensor bn3a_branch2b_w = vxCreateTensor(context, 2, dims_bn3a_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn3a_branch2b_w);
    vx_size dims_bn3a_branch2b_b[2] = { 128, 1 };
    vx_tensor bn3a_branch2b_b = vxCreateTensor(context, 2, dims_bn3a_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn3a_branch2b_b);
    vx_size dims_scale3a_branch2b_w[2] = { 128, 1 };
    vx_tensor scale3a_branch2b_w = vxCreateTensor(context, 2, dims_scale3a_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3a_branch2b_w);
    vx_size dims_scale3a_branch2b_b[2] = { 128, 1 };
    vx_tensor scale3a_branch2b_b = vxCreateTensor(context, 2, dims_scale3a_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3a_branch2b_b);
    vx_size dims_res3a_branch2c_w[4] = { 1, 1, 128, 512 };
    vx_tensor res3a_branch2c_w = vxCreateTensor(context, 4, dims_res3a_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3a_branch2c_w);
    vx_size dims_bn3a_branch2c_w[2] = { 512, 1 };
    vx_tensor bn3a_branch2c_w = vxCreateTensor(context, 2, dims_bn3a_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn3a_branch2c_w);
    vx_size dims_bn3a_branch2c_b[2] = { 512, 1 };
    vx_tensor bn3a_branch2c_b = vxCreateTensor(context, 2, dims_bn3a_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn3a_branch2c_b);
    vx_size dims_scale3a_branch2c_w[2] = { 512, 1 };
    vx_tensor scale3a_branch2c_w = vxCreateTensor(context, 2, dims_scale3a_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3a_branch2c_w);
    vx_size dims_scale3a_branch2c_b[2] = { 512, 1 };
    vx_tensor scale3a_branch2c_b = vxCreateTensor(context, 2, dims_scale3a_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3a_branch2c_b);
    vx_size dims_res3b_branch2a_w[4] = { 1, 1, 512, 128 };
    vx_tensor res3b_branch2a_w = vxCreateTensor(context, 4, dims_res3b_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3b_branch2a_w);
    vx_size dims_bn3b_branch2a_w[2] = { 128, 1 };
    vx_tensor bn3b_branch2a_w = vxCreateTensor(context, 2, dims_bn3b_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn3b_branch2a_w);
    vx_size dims_bn3b_branch2a_b[2] = { 128, 1 };
    vx_tensor bn3b_branch2a_b = vxCreateTensor(context, 2, dims_bn3b_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn3b_branch2a_b);
    vx_size dims_scale3b_branch2a_w[2] = { 128, 1 };
    vx_tensor scale3b_branch2a_w = vxCreateTensor(context, 2, dims_scale3b_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3b_branch2a_w);
    vx_size dims_scale3b_branch2a_b[2] = { 128, 1 };
    vx_tensor scale3b_branch2a_b = vxCreateTensor(context, 2, dims_scale3b_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3b_branch2a_b);
    vx_size dims_res3b_branch2b_w[4] = { 3, 3, 128, 128 };
    vx_tensor res3b_branch2b_w = vxCreateTensor(context, 4, dims_res3b_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3b_branch2b_w);
    vx_size dims_bn3b_branch2b_w[2] = { 128, 1 };
    vx_tensor bn3b_branch2b_w = vxCreateTensor(context, 2, dims_bn3b_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn3b_branch2b_w);
    vx_size dims_bn3b_branch2b_b[2] = { 128, 1 };
    vx_tensor bn3b_branch2b_b = vxCreateTensor(context, 2, dims_bn3b_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn3b_branch2b_b);
    vx_size dims_scale3b_branch2b_w[2] = { 128, 1 };
    vx_tensor scale3b_branch2b_w = vxCreateTensor(context, 2, dims_scale3b_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3b_branch2b_w);
    vx_size dims_scale3b_branch2b_b[2] = { 128, 1 };
    vx_tensor scale3b_branch2b_b = vxCreateTensor(context, 2, dims_scale3b_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3b_branch2b_b);
    vx_size dims_res3b_branch2c_w[4] = { 1, 1, 128, 512 };
    vx_tensor res3b_branch2c_w = vxCreateTensor(context, 4, dims_res3b_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3b_branch2c_w);
    vx_size dims_bn3b_branch2c_w[2] = { 512, 1 };
    vx_tensor bn3b_branch2c_w = vxCreateTensor(context, 2, dims_bn3b_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn3b_branch2c_w);
    vx_size dims_bn3b_branch2c_b[2] = { 512, 1 };
    vx_tensor bn3b_branch2c_b = vxCreateTensor(context, 2, dims_bn3b_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn3b_branch2c_b);
    vx_size dims_scale3b_branch2c_w[2] = { 512, 1 };
    vx_tensor scale3b_branch2c_w = vxCreateTensor(context, 2, dims_scale3b_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3b_branch2c_w);
    vx_size dims_scale3b_branch2c_b[2] = { 512, 1 };
    vx_tensor scale3b_branch2c_b = vxCreateTensor(context, 2, dims_scale3b_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3b_branch2c_b);
    vx_size dims_res3c_branch2a_w[4] = { 1, 1, 512, 128 };
    vx_tensor res3c_branch2a_w = vxCreateTensor(context, 4, dims_res3c_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3c_branch2a_w);
    vx_size dims_bn3c_branch2a_w[2] = { 128, 1 };
    vx_tensor bn3c_branch2a_w = vxCreateTensor(context, 2, dims_bn3c_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn3c_branch2a_w);
    vx_size dims_bn3c_branch2a_b[2] = { 128, 1 };
    vx_tensor bn3c_branch2a_b = vxCreateTensor(context, 2, dims_bn3c_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn3c_branch2a_b);
    vx_size dims_scale3c_branch2a_w[2] = { 128, 1 };
    vx_tensor scale3c_branch2a_w = vxCreateTensor(context, 2, dims_scale3c_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3c_branch2a_w);
    vx_size dims_scale3c_branch2a_b[2] = { 128, 1 };
    vx_tensor scale3c_branch2a_b = vxCreateTensor(context, 2, dims_scale3c_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3c_branch2a_b);
    vx_size dims_res3c_branch2b_w[4] = { 3, 3, 128, 128 };
    vx_tensor res3c_branch2b_w = vxCreateTensor(context, 4, dims_res3c_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3c_branch2b_w);
    vx_size dims_bn3c_branch2b_w[2] = { 128, 1 };
    vx_tensor bn3c_branch2b_w = vxCreateTensor(context, 2, dims_bn3c_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn3c_branch2b_w);
    vx_size dims_bn3c_branch2b_b[2] = { 128, 1 };
    vx_tensor bn3c_branch2b_b = vxCreateTensor(context, 2, dims_bn3c_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn3c_branch2b_b);
    vx_size dims_scale3c_branch2b_w[2] = { 128, 1 };
    vx_tensor scale3c_branch2b_w = vxCreateTensor(context, 2, dims_scale3c_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3c_branch2b_w);
    vx_size dims_scale3c_branch2b_b[2] = { 128, 1 };
    vx_tensor scale3c_branch2b_b = vxCreateTensor(context, 2, dims_scale3c_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3c_branch2b_b);
    vx_size dims_res3c_branch2c_w[4] = { 1, 1, 128, 512 };
    vx_tensor res3c_branch2c_w = vxCreateTensor(context, 4, dims_res3c_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3c_branch2c_w);
    vx_size dims_bn3c_branch2c_w[2] = { 512, 1 };
    vx_tensor bn3c_branch2c_w = vxCreateTensor(context, 2, dims_bn3c_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn3c_branch2c_w);
    vx_size dims_bn3c_branch2c_b[2] = { 512, 1 };
    vx_tensor bn3c_branch2c_b = vxCreateTensor(context, 2, dims_bn3c_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn3c_branch2c_b);
    vx_size dims_scale3c_branch2c_w[2] = { 512, 1 };
    vx_tensor scale3c_branch2c_w = vxCreateTensor(context, 2, dims_scale3c_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3c_branch2c_w);
    vx_size dims_scale3c_branch2c_b[2] = { 512, 1 };
    vx_tensor scale3c_branch2c_b = vxCreateTensor(context, 2, dims_scale3c_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3c_branch2c_b);
    vx_size dims_res3d_branch2a_w[4] = { 1, 1, 512, 128 };
    vx_tensor res3d_branch2a_w = vxCreateTensor(context, 4, dims_res3d_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3d_branch2a_w);
    vx_size dims_bn3d_branch2a_w[2] = { 128, 1 };
    vx_tensor bn3d_branch2a_w = vxCreateTensor(context, 2, dims_bn3d_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn3d_branch2a_w);
    vx_size dims_bn3d_branch2a_b[2] = { 128, 1 };
    vx_tensor bn3d_branch2a_b = vxCreateTensor(context, 2, dims_bn3d_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn3d_branch2a_b);
    vx_size dims_scale3d_branch2a_w[2] = { 128, 1 };
    vx_tensor scale3d_branch2a_w = vxCreateTensor(context, 2, dims_scale3d_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3d_branch2a_w);
    vx_size dims_scale3d_branch2a_b[2] = { 128, 1 };
    vx_tensor scale3d_branch2a_b = vxCreateTensor(context, 2, dims_scale3d_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3d_branch2a_b);
    vx_size dims_res3d_branch2b_w[4] = { 3, 3, 128, 128 };
    vx_tensor res3d_branch2b_w = vxCreateTensor(context, 4, dims_res3d_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3d_branch2b_w);
    vx_size dims_bn3d_branch2b_w[2] = { 128, 1 };
    vx_tensor bn3d_branch2b_w = vxCreateTensor(context, 2, dims_bn3d_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn3d_branch2b_w);
    vx_size dims_bn3d_branch2b_b[2] = { 128, 1 };
    vx_tensor bn3d_branch2b_b = vxCreateTensor(context, 2, dims_bn3d_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn3d_branch2b_b);
    vx_size dims_scale3d_branch2b_w[2] = { 128, 1 };
    vx_tensor scale3d_branch2b_w = vxCreateTensor(context, 2, dims_scale3d_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3d_branch2b_w);
    vx_size dims_scale3d_branch2b_b[2] = { 128, 1 };
    vx_tensor scale3d_branch2b_b = vxCreateTensor(context, 2, dims_scale3d_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3d_branch2b_b);
    vx_size dims_res3d_branch2c_w[4] = { 1, 1, 128, 512 };
    vx_tensor res3d_branch2c_w = vxCreateTensor(context, 4, dims_res3d_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3d_branch2c_w);
    vx_size dims_bn3d_branch2c_w[2] = { 512, 1 };
    vx_tensor bn3d_branch2c_w = vxCreateTensor(context, 2, dims_bn3d_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn3d_branch2c_w);
    vx_size dims_bn3d_branch2c_b[2] = { 512, 1 };
    vx_tensor bn3d_branch2c_b = vxCreateTensor(context, 2, dims_bn3d_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn3d_branch2c_b);
    vx_size dims_scale3d_branch2c_w[2] = { 512, 1 };
    vx_tensor scale3d_branch2c_w = vxCreateTensor(context, 2, dims_scale3d_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3d_branch2c_w);
    vx_size dims_scale3d_branch2c_b[2] = { 512, 1 };
    vx_tensor scale3d_branch2c_b = vxCreateTensor(context, 2, dims_scale3d_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3d_branch2c_b);
    vx_size dims_res4a_branch1_w[4] = { 1, 1, 512, 1024 };
    vx_tensor res4a_branch1_w = vxCreateTensor(context, 4, dims_res4a_branch1_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4a_branch1_w);
    vx_size dims_bn4a_branch1_w[2] = { 1024, 1 };
    vx_tensor bn4a_branch1_w = vxCreateTensor(context, 2, dims_bn4a_branch1_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4a_branch1_w);
    vx_size dims_bn4a_branch1_b[2] = { 1024, 1 };
    vx_tensor bn4a_branch1_b = vxCreateTensor(context, 2, dims_bn4a_branch1_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4a_branch1_b);
    vx_size dims_scale4a_branch1_w[2] = { 1024, 1 };
    vx_tensor scale4a_branch1_w = vxCreateTensor(context, 2, dims_scale4a_branch1_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4a_branch1_w);
    vx_size dims_scale4a_branch1_b[2] = { 1024, 1 };
    vx_tensor scale4a_branch1_b = vxCreateTensor(context, 2, dims_scale4a_branch1_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4a_branch1_b);
    vx_size dims_res4a_branch2a_w[4] = { 1, 1, 512, 256 };
    vx_tensor res4a_branch2a_w = vxCreateTensor(context, 4, dims_res4a_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4a_branch2a_w);
    vx_size dims_bn4a_branch2a_w[2] = { 256, 1 };
    vx_tensor bn4a_branch2a_w = vxCreateTensor(context, 2, dims_bn4a_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4a_branch2a_w);
    vx_size dims_bn4a_branch2a_b[2] = { 256, 1 };
    vx_tensor bn4a_branch2a_b = vxCreateTensor(context, 2, dims_bn4a_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4a_branch2a_b);
    vx_size dims_scale4a_branch2a_w[2] = { 256, 1 };
    vx_tensor scale4a_branch2a_w = vxCreateTensor(context, 2, dims_scale4a_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4a_branch2a_w);
    vx_size dims_scale4a_branch2a_b[2] = { 256, 1 };
    vx_tensor scale4a_branch2a_b = vxCreateTensor(context, 2, dims_scale4a_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4a_branch2a_b);
    vx_size dims_res4a_branch2b_w[4] = { 3, 3, 256, 256 };
    vx_tensor res4a_branch2b_w = vxCreateTensor(context, 4, dims_res4a_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4a_branch2b_w);
    vx_size dims_bn4a_branch2b_w[2] = { 256, 1 };
    vx_tensor bn4a_branch2b_w = vxCreateTensor(context, 2, dims_bn4a_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4a_branch2b_w);
    vx_size dims_bn4a_branch2b_b[2] = { 256, 1 };
    vx_tensor bn4a_branch2b_b = vxCreateTensor(context, 2, dims_bn4a_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4a_branch2b_b);
    vx_size dims_scale4a_branch2b_w[2] = { 256, 1 };
    vx_tensor scale4a_branch2b_w = vxCreateTensor(context, 2, dims_scale4a_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4a_branch2b_w);
    vx_size dims_scale4a_branch2b_b[2] = { 256, 1 };
    vx_tensor scale4a_branch2b_b = vxCreateTensor(context, 2, dims_scale4a_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4a_branch2b_b);
    vx_size dims_res4a_branch2c_w[4] = { 1, 1, 256, 1024 };
    vx_tensor res4a_branch2c_w = vxCreateTensor(context, 4, dims_res4a_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4a_branch2c_w);
    vx_size dims_bn4a_branch2c_w[2] = { 1024, 1 };
    vx_tensor bn4a_branch2c_w = vxCreateTensor(context, 2, dims_bn4a_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4a_branch2c_w);
    vx_size dims_bn4a_branch2c_b[2] = { 1024, 1 };
    vx_tensor bn4a_branch2c_b = vxCreateTensor(context, 2, dims_bn4a_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4a_branch2c_b);
    vx_size dims_scale4a_branch2c_w[2] = { 1024, 1 };
    vx_tensor scale4a_branch2c_w = vxCreateTensor(context, 2, dims_scale4a_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4a_branch2c_w);
    vx_size dims_scale4a_branch2c_b[2] = { 1024, 1 };
    vx_tensor scale4a_branch2c_b = vxCreateTensor(context, 2, dims_scale4a_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4a_branch2c_b);
    vx_size dims_res4b_branch2a_w[4] = { 1, 1, 1024, 256 };
    vx_tensor res4b_branch2a_w = vxCreateTensor(context, 4, dims_res4b_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4b_branch2a_w);
    vx_size dims_bn4b_branch2a_w[2] = { 256, 1 };
    vx_tensor bn4b_branch2a_w = vxCreateTensor(context, 2, dims_bn4b_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4b_branch2a_w);
    vx_size dims_bn4b_branch2a_b[2] = { 256, 1 };
    vx_tensor bn4b_branch2a_b = vxCreateTensor(context, 2, dims_bn4b_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4b_branch2a_b);
    vx_size dims_scale4b_branch2a_w[2] = { 256, 1 };
    vx_tensor scale4b_branch2a_w = vxCreateTensor(context, 2, dims_scale4b_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4b_branch2a_w);
    vx_size dims_scale4b_branch2a_b[2] = { 256, 1 };
    vx_tensor scale4b_branch2a_b = vxCreateTensor(context, 2, dims_scale4b_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4b_branch2a_b);
    vx_size dims_res4b_branch2b_w[4] = { 3, 3, 256, 256 };
    vx_tensor res4b_branch2b_w = vxCreateTensor(context, 4, dims_res4b_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4b_branch2b_w);
    vx_size dims_bn4b_branch2b_w[2] = { 256, 1 };
    vx_tensor bn4b_branch2b_w = vxCreateTensor(context, 2, dims_bn4b_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4b_branch2b_w);
    vx_size dims_bn4b_branch2b_b[2] = { 256, 1 };
    vx_tensor bn4b_branch2b_b = vxCreateTensor(context, 2, dims_bn4b_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4b_branch2b_b);
    vx_size dims_scale4b_branch2b_w[2] = { 256, 1 };
    vx_tensor scale4b_branch2b_w = vxCreateTensor(context, 2, dims_scale4b_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4b_branch2b_w);
    vx_size dims_scale4b_branch2b_b[2] = { 256, 1 };
    vx_tensor scale4b_branch2b_b = vxCreateTensor(context, 2, dims_scale4b_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4b_branch2b_b);
    vx_size dims_res4b_branch2c_w[4] = { 1, 1, 256, 1024 };
    vx_tensor res4b_branch2c_w = vxCreateTensor(context, 4, dims_res4b_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4b_branch2c_w);
    vx_size dims_bn4b_branch2c_w[2] = { 1024, 1 };
    vx_tensor bn4b_branch2c_w = vxCreateTensor(context, 2, dims_bn4b_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4b_branch2c_w);
    vx_size dims_bn4b_branch2c_b[2] = { 1024, 1 };
    vx_tensor bn4b_branch2c_b = vxCreateTensor(context, 2, dims_bn4b_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4b_branch2c_b);
    vx_size dims_scale4b_branch2c_w[2] = { 1024, 1 };
    vx_tensor scale4b_branch2c_w = vxCreateTensor(context, 2, dims_scale4b_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4b_branch2c_w);
    vx_size dims_scale4b_branch2c_b[2] = { 1024, 1 };
    vx_tensor scale4b_branch2c_b = vxCreateTensor(context, 2, dims_scale4b_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4b_branch2c_b);
    vx_size dims_res4c_branch2a_w[4] = { 1, 1, 1024, 256 };
    vx_tensor res4c_branch2a_w = vxCreateTensor(context, 4, dims_res4c_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4c_branch2a_w);
    vx_size dims_bn4c_branch2a_w[2] = { 256, 1 };
    vx_tensor bn4c_branch2a_w = vxCreateTensor(context, 2, dims_bn4c_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4c_branch2a_w);
    vx_size dims_bn4c_branch2a_b[2] = { 256, 1 };
    vx_tensor bn4c_branch2a_b = vxCreateTensor(context, 2, dims_bn4c_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4c_branch2a_b);
    vx_size dims_scale4c_branch2a_w[2] = { 256, 1 };
    vx_tensor scale4c_branch2a_w = vxCreateTensor(context, 2, dims_scale4c_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4c_branch2a_w);
    vx_size dims_scale4c_branch2a_b[2] = { 256, 1 };
    vx_tensor scale4c_branch2a_b = vxCreateTensor(context, 2, dims_scale4c_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4c_branch2a_b);
    vx_size dims_res4c_branch2b_w[4] = { 3, 3, 256, 256 };
    vx_tensor res4c_branch2b_w = vxCreateTensor(context, 4, dims_res4c_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4c_branch2b_w);
    vx_size dims_bn4c_branch2b_w[2] = { 256, 1 };
    vx_tensor bn4c_branch2b_w = vxCreateTensor(context, 2, dims_bn4c_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4c_branch2b_w);
    vx_size dims_bn4c_branch2b_b[2] = { 256, 1 };
    vx_tensor bn4c_branch2b_b = vxCreateTensor(context, 2, dims_bn4c_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4c_branch2b_b);
    vx_size dims_scale4c_branch2b_w[2] = { 256, 1 };
    vx_tensor scale4c_branch2b_w = vxCreateTensor(context, 2, dims_scale4c_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4c_branch2b_w);
    vx_size dims_scale4c_branch2b_b[2] = { 256, 1 };
    vx_tensor scale4c_branch2b_b = vxCreateTensor(context, 2, dims_scale4c_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4c_branch2b_b);
    vx_size dims_res4c_branch2c_w[4] = { 1, 1, 256, 1024 };
    vx_tensor res4c_branch2c_w = vxCreateTensor(context, 4, dims_res4c_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4c_branch2c_w);
    vx_size dims_bn4c_branch2c_w[2] = { 1024, 1 };
    vx_tensor bn4c_branch2c_w = vxCreateTensor(context, 2, dims_bn4c_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4c_branch2c_w);
    vx_size dims_bn4c_branch2c_b[2] = { 1024, 1 };
    vx_tensor bn4c_branch2c_b = vxCreateTensor(context, 2, dims_bn4c_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4c_branch2c_b);
    vx_size dims_scale4c_branch2c_w[2] = { 1024, 1 };
    vx_tensor scale4c_branch2c_w = vxCreateTensor(context, 2, dims_scale4c_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4c_branch2c_w);
    vx_size dims_scale4c_branch2c_b[2] = { 1024, 1 };
    vx_tensor scale4c_branch2c_b = vxCreateTensor(context, 2, dims_scale4c_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4c_branch2c_b);
    vx_size dims_res4d_branch2a_w[4] = { 1, 1, 1024, 256 };
    vx_tensor res4d_branch2a_w = vxCreateTensor(context, 4, dims_res4d_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4d_branch2a_w);
    vx_size dims_bn4d_branch2a_w[2] = { 256, 1 };
    vx_tensor bn4d_branch2a_w = vxCreateTensor(context, 2, dims_bn4d_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4d_branch2a_w);
    vx_size dims_bn4d_branch2a_b[2] = { 256, 1 };
    vx_tensor bn4d_branch2a_b = vxCreateTensor(context, 2, dims_bn4d_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4d_branch2a_b);
    vx_size dims_scale4d_branch2a_w[2] = { 256, 1 };
    vx_tensor scale4d_branch2a_w = vxCreateTensor(context, 2, dims_scale4d_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4d_branch2a_w);
    vx_size dims_scale4d_branch2a_b[2] = { 256, 1 };
    vx_tensor scale4d_branch2a_b = vxCreateTensor(context, 2, dims_scale4d_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4d_branch2a_b);
    vx_size dims_res4d_branch2b_w[4] = { 3, 3, 256, 256 };
    vx_tensor res4d_branch2b_w = vxCreateTensor(context, 4, dims_res4d_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4d_branch2b_w);
    vx_size dims_bn4d_branch2b_w[2] = { 256, 1 };
    vx_tensor bn4d_branch2b_w = vxCreateTensor(context, 2, dims_bn4d_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4d_branch2b_w);
    vx_size dims_bn4d_branch2b_b[2] = { 256, 1 };
    vx_tensor bn4d_branch2b_b = vxCreateTensor(context, 2, dims_bn4d_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4d_branch2b_b);
    vx_size dims_scale4d_branch2b_w[2] = { 256, 1 };
    vx_tensor scale4d_branch2b_w = vxCreateTensor(context, 2, dims_scale4d_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4d_branch2b_w);
    vx_size dims_scale4d_branch2b_b[2] = { 256, 1 };
    vx_tensor scale4d_branch2b_b = vxCreateTensor(context, 2, dims_scale4d_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4d_branch2b_b);
    vx_size dims_res4d_branch2c_w[4] = { 1, 1, 256, 1024 };
    vx_tensor res4d_branch2c_w = vxCreateTensor(context, 4, dims_res4d_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4d_branch2c_w);
    vx_size dims_bn4d_branch2c_w[2] = { 1024, 1 };
    vx_tensor bn4d_branch2c_w = vxCreateTensor(context, 2, dims_bn4d_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4d_branch2c_w);
    vx_size dims_bn4d_branch2c_b[2] = { 1024, 1 };
    vx_tensor bn4d_branch2c_b = vxCreateTensor(context, 2, dims_bn4d_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4d_branch2c_b);
    vx_size dims_scale4d_branch2c_w[2] = { 1024, 1 };
    vx_tensor scale4d_branch2c_w = vxCreateTensor(context, 2, dims_scale4d_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4d_branch2c_w);
    vx_size dims_scale4d_branch2c_b[2] = { 1024, 1 };
    vx_tensor scale4d_branch2c_b = vxCreateTensor(context, 2, dims_scale4d_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4d_branch2c_b);
    vx_size dims_res4e_branch2a_w[4] = { 1, 1, 1024, 256 };
    vx_tensor res4e_branch2a_w = vxCreateTensor(context, 4, dims_res4e_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4e_branch2a_w);
    vx_size dims_bn4e_branch2a_w[2] = { 256, 1 };
    vx_tensor bn4e_branch2a_w = vxCreateTensor(context, 2, dims_bn4e_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4e_branch2a_w);
    vx_size dims_bn4e_branch2a_b[2] = { 256, 1 };
    vx_tensor bn4e_branch2a_b = vxCreateTensor(context, 2, dims_bn4e_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4e_branch2a_b);
    vx_size dims_scale4e_branch2a_w[2] = { 256, 1 };
    vx_tensor scale4e_branch2a_w = vxCreateTensor(context, 2, dims_scale4e_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4e_branch2a_w);
    vx_size dims_scale4e_branch2a_b[2] = { 256, 1 };
    vx_tensor scale4e_branch2a_b = vxCreateTensor(context, 2, dims_scale4e_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4e_branch2a_b);
    vx_size dims_res4e_branch2b_w[4] = { 3, 3, 256, 256 };
    vx_tensor res4e_branch2b_w = vxCreateTensor(context, 4, dims_res4e_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4e_branch2b_w);
    vx_size dims_bn4e_branch2b_w[2] = { 256, 1 };
    vx_tensor bn4e_branch2b_w = vxCreateTensor(context, 2, dims_bn4e_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4e_branch2b_w);
    vx_size dims_bn4e_branch2b_b[2] = { 256, 1 };
    vx_tensor bn4e_branch2b_b = vxCreateTensor(context, 2, dims_bn4e_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4e_branch2b_b);
    vx_size dims_scale4e_branch2b_w[2] = { 256, 1 };
    vx_tensor scale4e_branch2b_w = vxCreateTensor(context, 2, dims_scale4e_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4e_branch2b_w);
    vx_size dims_scale4e_branch2b_b[2] = { 256, 1 };
    vx_tensor scale4e_branch2b_b = vxCreateTensor(context, 2, dims_scale4e_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4e_branch2b_b);
    vx_size dims_res4e_branch2c_w[4] = { 1, 1, 256, 1024 };
    vx_tensor res4e_branch2c_w = vxCreateTensor(context, 4, dims_res4e_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4e_branch2c_w);
    vx_size dims_bn4e_branch2c_w[2] = { 1024, 1 };
    vx_tensor bn4e_branch2c_w = vxCreateTensor(context, 2, dims_bn4e_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4e_branch2c_w);
    vx_size dims_bn4e_branch2c_b[2] = { 1024, 1 };
    vx_tensor bn4e_branch2c_b = vxCreateTensor(context, 2, dims_bn4e_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4e_branch2c_b);
    vx_size dims_scale4e_branch2c_w[2] = { 1024, 1 };
    vx_tensor scale4e_branch2c_w = vxCreateTensor(context, 2, dims_scale4e_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4e_branch2c_w);
    vx_size dims_scale4e_branch2c_b[2] = { 1024, 1 };
    vx_tensor scale4e_branch2c_b = vxCreateTensor(context, 2, dims_scale4e_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4e_branch2c_b);
    vx_size dims_res4f_branch2a_w[4] = { 1, 1, 1024, 256 };
    vx_tensor res4f_branch2a_w = vxCreateTensor(context, 4, dims_res4f_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4f_branch2a_w);
    vx_size dims_bn4f_branch2a_w[2] = { 256, 1 };
    vx_tensor bn4f_branch2a_w = vxCreateTensor(context, 2, dims_bn4f_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4f_branch2a_w);
    vx_size dims_bn4f_branch2a_b[2] = { 256, 1 };
    vx_tensor bn4f_branch2a_b = vxCreateTensor(context, 2, dims_bn4f_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4f_branch2a_b);
    vx_size dims_scale4f_branch2a_w[2] = { 256, 1 };
    vx_tensor scale4f_branch2a_w = vxCreateTensor(context, 2, dims_scale4f_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4f_branch2a_w);
    vx_size dims_scale4f_branch2a_b[2] = { 256, 1 };
    vx_tensor scale4f_branch2a_b = vxCreateTensor(context, 2, dims_scale4f_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4f_branch2a_b);
    vx_size dims_res4f_branch2b_w[4] = { 3, 3, 256, 256 };
    vx_tensor res4f_branch2b_w = vxCreateTensor(context, 4, dims_res4f_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4f_branch2b_w);
    vx_size dims_bn4f_branch2b_w[2] = { 256, 1 };
    vx_tensor bn4f_branch2b_w = vxCreateTensor(context, 2, dims_bn4f_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4f_branch2b_w);
    vx_size dims_bn4f_branch2b_b[2] = { 256, 1 };
    vx_tensor bn4f_branch2b_b = vxCreateTensor(context, 2, dims_bn4f_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4f_branch2b_b);
    vx_size dims_scale4f_branch2b_w[2] = { 256, 1 };
    vx_tensor scale4f_branch2b_w = vxCreateTensor(context, 2, dims_scale4f_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4f_branch2b_w);
    vx_size dims_scale4f_branch2b_b[2] = { 256, 1 };
    vx_tensor scale4f_branch2b_b = vxCreateTensor(context, 2, dims_scale4f_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4f_branch2b_b);
    vx_size dims_res4f_branch2c_w[4] = { 1, 1, 256, 1024 };
    vx_tensor res4f_branch2c_w = vxCreateTensor(context, 4, dims_res4f_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4f_branch2c_w);
    vx_size dims_bn4f_branch2c_w[2] = { 1024, 1 };
    vx_tensor bn4f_branch2c_w = vxCreateTensor(context, 2, dims_bn4f_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4f_branch2c_w);
    vx_size dims_bn4f_branch2c_b[2] = { 1024, 1 };
    vx_tensor bn4f_branch2c_b = vxCreateTensor(context, 2, dims_bn4f_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn4f_branch2c_b);
    vx_size dims_scale4f_branch2c_w[2] = { 1024, 1 };
    vx_tensor scale4f_branch2c_w = vxCreateTensor(context, 2, dims_scale4f_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4f_branch2c_w);
    vx_size dims_scale4f_branch2c_b[2] = { 1024, 1 };
    vx_tensor scale4f_branch2c_b = vxCreateTensor(context, 2, dims_scale4f_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4f_branch2c_b);
    vx_size dims_res5a_branch1_w[4] = { 1, 1, 1024, 2048 };
    vx_tensor res5a_branch1_w = vxCreateTensor(context, 4, dims_res5a_branch1_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5a_branch1_w);
    vx_size dims_bn5a_branch1_w[2] = { 2048, 1 };
    vx_tensor bn5a_branch1_w = vxCreateTensor(context, 2, dims_bn5a_branch1_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn5a_branch1_w);
    vx_size dims_bn5a_branch1_b[2] = { 2048, 1 };
    vx_tensor bn5a_branch1_b = vxCreateTensor(context, 2, dims_bn5a_branch1_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn5a_branch1_b);
    vx_size dims_scale5a_branch1_w[2] = { 2048, 1 };
    vx_tensor scale5a_branch1_w = vxCreateTensor(context, 2, dims_scale5a_branch1_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale5a_branch1_w);
    vx_size dims_scale5a_branch1_b[2] = { 2048, 1 };
    vx_tensor scale5a_branch1_b = vxCreateTensor(context, 2, dims_scale5a_branch1_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale5a_branch1_b);
    vx_size dims_res5a_branch2a_w[4] = { 1, 1, 1024, 512 };
    vx_tensor res5a_branch2a_w = vxCreateTensor(context, 4, dims_res5a_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5a_branch2a_w);
    vx_size dims_bn5a_branch2a_w[2] = { 512, 1 };
    vx_tensor bn5a_branch2a_w = vxCreateTensor(context, 2, dims_bn5a_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn5a_branch2a_w);
    vx_size dims_bn5a_branch2a_b[2] = { 512, 1 };
    vx_tensor bn5a_branch2a_b = vxCreateTensor(context, 2, dims_bn5a_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn5a_branch2a_b);
    vx_size dims_scale5a_branch2a_w[2] = { 512, 1 };
    vx_tensor scale5a_branch2a_w = vxCreateTensor(context, 2, dims_scale5a_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale5a_branch2a_w);
    vx_size dims_scale5a_branch2a_b[2] = { 512, 1 };
    vx_tensor scale5a_branch2a_b = vxCreateTensor(context, 2, dims_scale5a_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale5a_branch2a_b);
    vx_size dims_res5a_branch2b_w[4] = { 3, 3, 512, 512 };
    vx_tensor res5a_branch2b_w = vxCreateTensor(context, 4, dims_res5a_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5a_branch2b_w);
    vx_size dims_bn5a_branch2b_w[2] = { 512, 1 };
    vx_tensor bn5a_branch2b_w = vxCreateTensor(context, 2, dims_bn5a_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn5a_branch2b_w);
    vx_size dims_bn5a_branch2b_b[2] = { 512, 1 };
    vx_tensor bn5a_branch2b_b = vxCreateTensor(context, 2, dims_bn5a_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn5a_branch2b_b);
    vx_size dims_scale5a_branch2b_w[2] = { 512, 1 };
    vx_tensor scale5a_branch2b_w = vxCreateTensor(context, 2, dims_scale5a_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale5a_branch2b_w);
    vx_size dims_scale5a_branch2b_b[2] = { 512, 1 };
    vx_tensor scale5a_branch2b_b = vxCreateTensor(context, 2, dims_scale5a_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale5a_branch2b_b);
    vx_size dims_res5a_branch2c_w[4] = { 1, 1, 512, 2048 };
    vx_tensor res5a_branch2c_w = vxCreateTensor(context, 4, dims_res5a_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5a_branch2c_w);
    vx_size dims_bn5a_branch2c_w[2] = { 2048, 1 };
    vx_tensor bn5a_branch2c_w = vxCreateTensor(context, 2, dims_bn5a_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn5a_branch2c_w);
    vx_size dims_bn5a_branch2c_b[2] = { 2048, 1 };
    vx_tensor bn5a_branch2c_b = vxCreateTensor(context, 2, dims_bn5a_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn5a_branch2c_b);
    vx_size dims_scale5a_branch2c_w[2] = { 2048, 1 };
    vx_tensor scale5a_branch2c_w = vxCreateTensor(context, 2, dims_scale5a_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale5a_branch2c_w);
    vx_size dims_scale5a_branch2c_b[2] = { 2048, 1 };
    vx_tensor scale5a_branch2c_b = vxCreateTensor(context, 2, dims_scale5a_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale5a_branch2c_b);
    vx_size dims_res5b_branch2a_w[4] = { 1, 1, 2048, 512 };
    vx_tensor res5b_branch2a_w = vxCreateTensor(context, 4, dims_res5b_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5b_branch2a_w);
    vx_size dims_bn5b_branch2a_w[2] = { 512, 1 };
    vx_tensor bn5b_branch2a_w = vxCreateTensor(context, 2, dims_bn5b_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn5b_branch2a_w);
    vx_size dims_bn5b_branch2a_b[2] = { 512, 1 };
    vx_tensor bn5b_branch2a_b = vxCreateTensor(context, 2, dims_bn5b_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn5b_branch2a_b);
    vx_size dims_scale5b_branch2a_w[2] = { 512, 1 };
    vx_tensor scale5b_branch2a_w = vxCreateTensor(context, 2, dims_scale5b_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale5b_branch2a_w);
    vx_size dims_scale5b_branch2a_b[2] = { 512, 1 };
    vx_tensor scale5b_branch2a_b = vxCreateTensor(context, 2, dims_scale5b_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale5b_branch2a_b);
    vx_size dims_res5b_branch2b_w[4] = { 3, 3, 512, 512 };
    vx_tensor res5b_branch2b_w = vxCreateTensor(context, 4, dims_res5b_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5b_branch2b_w);
    vx_size dims_bn5b_branch2b_w[2] = { 512, 1 };
    vx_tensor bn5b_branch2b_w = vxCreateTensor(context, 2, dims_bn5b_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn5b_branch2b_w);
    vx_size dims_bn5b_branch2b_b[2] = { 512, 1 };
    vx_tensor bn5b_branch2b_b = vxCreateTensor(context, 2, dims_bn5b_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn5b_branch2b_b);
    vx_size dims_scale5b_branch2b_w[2] = { 512, 1 };
    vx_tensor scale5b_branch2b_w = vxCreateTensor(context, 2, dims_scale5b_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale5b_branch2b_w);
    vx_size dims_scale5b_branch2b_b[2] = { 512, 1 };
    vx_tensor scale5b_branch2b_b = vxCreateTensor(context, 2, dims_scale5b_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale5b_branch2b_b);
    vx_size dims_res5b_branch2c_w[4] = { 1, 1, 512, 2048 };
    vx_tensor res5b_branch2c_w = vxCreateTensor(context, 4, dims_res5b_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5b_branch2c_w);
    vx_size dims_bn5b_branch2c_w[2] = { 2048, 1 };
    vx_tensor bn5b_branch2c_w = vxCreateTensor(context, 2, dims_bn5b_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn5b_branch2c_w);
    vx_size dims_bn5b_branch2c_b[2] = { 2048, 1 };
    vx_tensor bn5b_branch2c_b = vxCreateTensor(context, 2, dims_bn5b_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn5b_branch2c_b);
    vx_size dims_scale5b_branch2c_w[2] = { 2048, 1 };
    vx_tensor scale5b_branch2c_w = vxCreateTensor(context, 2, dims_scale5b_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale5b_branch2c_w);
    vx_size dims_scale5b_branch2c_b[2] = { 2048, 1 };
    vx_tensor scale5b_branch2c_b = vxCreateTensor(context, 2, dims_scale5b_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale5b_branch2c_b);
    vx_size dims_res5c_branch2a_w[4] = { 1, 1, 2048, 512 };
    vx_tensor res5c_branch2a_w = vxCreateTensor(context, 4, dims_res5c_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5c_branch2a_w);
    vx_size dims_bn5c_branch2a_w[2] = { 512, 1 };
    vx_tensor bn5c_branch2a_w = vxCreateTensor(context, 2, dims_bn5c_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn5c_branch2a_w);
    vx_size dims_bn5c_branch2a_b[2] = { 512, 1 };
    vx_tensor bn5c_branch2a_b = vxCreateTensor(context, 2, dims_bn5c_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn5c_branch2a_b);
    vx_size dims_scale5c_branch2a_w[2] = { 512, 1 };
    vx_tensor scale5c_branch2a_w = vxCreateTensor(context, 2, dims_scale5c_branch2a_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale5c_branch2a_w);
    vx_size dims_scale5c_branch2a_b[2] = { 512, 1 };
    vx_tensor scale5c_branch2a_b = vxCreateTensor(context, 2, dims_scale5c_branch2a_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale5c_branch2a_b);
    vx_size dims_res5c_branch2b_w[4] = { 3, 3, 512, 512 };
    vx_tensor res5c_branch2b_w = vxCreateTensor(context, 4, dims_res5c_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5c_branch2b_w);
    vx_size dims_bn5c_branch2b_w[2] = { 512, 1 };
    vx_tensor bn5c_branch2b_w = vxCreateTensor(context, 2, dims_bn5c_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn5c_branch2b_w);
    vx_size dims_bn5c_branch2b_b[2] = { 512, 1 };
    vx_tensor bn5c_branch2b_b = vxCreateTensor(context, 2, dims_bn5c_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn5c_branch2b_b);
    vx_size dims_scale5c_branch2b_w[2] = { 512, 1 };
    vx_tensor scale5c_branch2b_w = vxCreateTensor(context, 2, dims_scale5c_branch2b_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale5c_branch2b_w);
    vx_size dims_scale5c_branch2b_b[2] = { 512, 1 };
    vx_tensor scale5c_branch2b_b = vxCreateTensor(context, 2, dims_scale5c_branch2b_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale5c_branch2b_b);
    vx_size dims_res5c_branch2c_w[4] = { 1, 1, 512, 2048 };
    vx_tensor res5c_branch2c_w = vxCreateTensor(context, 4, dims_res5c_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5c_branch2c_w);
    vx_size dims_bn5c_branch2c_w[2] = { 2048, 1 };
    vx_tensor bn5c_branch2c_w = vxCreateTensor(context, 2, dims_bn5c_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn5c_branch2c_w);
    vx_size dims_bn5c_branch2c_b[2] = { 2048, 1 };
    vx_tensor bn5c_branch2c_b = vxCreateTensor(context, 2, dims_bn5c_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(bn5c_branch2c_b);
    vx_size dims_scale5c_branch2c_w[2] = { 2048, 1 };
    vx_tensor scale5c_branch2c_w = vxCreateTensor(context, 2, dims_scale5c_branch2c_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale5c_branch2c_w);
    vx_size dims_scale5c_branch2c_b[2] = { 2048, 1 };
    vx_tensor scale5c_branch2c_b = vxCreateTensor(context, 2, dims_scale5c_branch2c_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale5c_branch2c_b);
    vx_size dims_fc1000_w[4] = { 1, 1, 2048, 1000 };
    vx_tensor fc1000_w = vxCreateTensor(context, 4, dims_fc1000_w, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(fc1000_w);
    vx_size dims_fc1000_b[2] = { 1000, 1 };
    vx_tensor fc1000_b = vxCreateTensor(context, 2, dims_fc1000_b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(fc1000_b);

    // initialize variables
    FILE * fp__variables = fopen(binaryFilename, "rb");
    if(!fp__variables) {
        vxAddLogEntry((vx_reference)context, VX_FAILURE, "ERROR: unable to open: %s\n", binaryFilename);
        return VX_FAILURE;
    }
    { vx_uint32 magic = 0;
      fread(&magic, 1, sizeof(magic), fp__variables);
      if(magic != 0xf00dd1e0) {
        vxAddLogEntry((vx_reference)context, VX_FAILURE, "ERROR: invalid file magic in %s\n", binaryFilename);
        return VX_FAILURE;
      }
    }
    ERROR_CHECK_STATUS(initializeTensor(context, conv1_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, conv1_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn_conv1_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn_conv1_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale_conv1_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale_conv1_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res2a_branch1_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn2a_branch1_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn2a_branch1_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale2a_branch1_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale2a_branch1_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res2a_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn2a_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn2a_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale2a_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale2a_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res2a_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn2a_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn2a_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale2a_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale2a_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res2a_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn2a_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn2a_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale2a_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale2a_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res2b_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn2b_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn2b_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale2b_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale2b_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res2b_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn2b_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn2b_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale2b_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale2b_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res2b_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn2b_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn2b_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale2b_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale2b_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res2c_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn2c_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn2c_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale2c_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale2c_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res2c_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn2c_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn2c_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale2c_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale2c_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res2c_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn2c_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn2c_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale2c_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale2c_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res3a_branch1_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn3a_branch1_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn3a_branch1_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale3a_branch1_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale3a_branch1_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res3a_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn3a_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn3a_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale3a_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale3a_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res3a_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn3a_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn3a_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale3a_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale3a_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res3a_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn3a_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn3a_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale3a_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale3a_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res3b_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn3b_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn3b_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale3b_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale3b_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res3b_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn3b_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn3b_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale3b_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale3b_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res3b_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn3b_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn3b_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale3b_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale3b_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res3c_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn3c_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn3c_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale3c_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale3c_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res3c_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn3c_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn3c_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale3c_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale3c_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res3c_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn3c_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn3c_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale3c_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale3c_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res3d_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn3d_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn3d_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale3d_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale3d_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res3d_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn3d_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn3d_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale3d_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale3d_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res3d_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn3d_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn3d_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale3d_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale3d_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res4a_branch1_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4a_branch1_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4a_branch1_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4a_branch1_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4a_branch1_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res4a_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4a_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4a_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4a_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4a_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res4a_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4a_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4a_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4a_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4a_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res4a_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4a_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4a_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4a_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4a_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res4b_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4b_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4b_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4b_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4b_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res4b_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4b_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4b_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4b_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4b_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res4b_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4b_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4b_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4b_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4b_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res4c_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4c_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4c_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4c_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4c_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res4c_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4c_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4c_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4c_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4c_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res4c_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4c_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4c_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4c_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4c_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res4d_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4d_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4d_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4d_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4d_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res4d_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4d_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4d_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4d_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4d_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res4d_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4d_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4d_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4d_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4d_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res4e_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4e_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4e_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4e_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4e_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res4e_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4e_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4e_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4e_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4e_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res4e_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4e_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4e_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4e_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4e_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res4f_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4f_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4f_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4f_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4f_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res4f_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4f_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4f_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4f_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4f_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res4f_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4f_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn4f_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4f_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale4f_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res5a_branch1_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn5a_branch1_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn5a_branch1_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale5a_branch1_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale5a_branch1_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res5a_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn5a_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn5a_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale5a_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale5a_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res5a_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn5a_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn5a_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale5a_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale5a_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res5a_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn5a_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn5a_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale5a_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale5a_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res5b_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn5b_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn5b_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale5b_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale5b_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res5b_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn5b_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn5b_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale5b_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale5b_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res5b_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn5b_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn5b_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale5b_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale5b_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res5c_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn5c_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn5c_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale5c_branch2a_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale5c_branch2a_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res5c_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn5c_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn5c_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale5c_branch2b_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale5c_branch2b_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, res5c_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn5c_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, bn5c_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale5c_branch2c_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, scale5c_branch2c_b, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, fc1000_w, fp__variables, binaryFilename));
    ERROR_CHECK_STATUS(initializeTensor(context, fc1000_b, fp__variables, binaryFilename));
    { vx_uint32 magic = 0;
      fread(&magic, 1, sizeof(magic), fp__variables);
      if(magic != 0xf00dd1e2) {
        vxAddLogEntry((vx_reference)context, VX_FAILURE, "ERROR: invalid eoff magic in %s\n", binaryFilename);
        return VX_FAILURE;
      }
      fclose(fp__variables);
    }

    // create local tensors used in graph
    vx_size dims_conv1[4] = { 112, 112, 64, 1 };
    vx_tensor conv1 = vxCreateVirtualTensor(graph, 4, dims_conv1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv1);
    vx_size dims_scale_conv1[4] = { 112, 112, 64, 1 };
    vx_tensor scale_conv1 = vxCreateVirtualTensor(graph, 4, dims_scale_conv1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale_conv1);
    vx_size dims_conv1_relu[4] = { 112, 112, 64, 1 };
    vx_tensor conv1_relu = vxCreateVirtualTensor(graph, 4, dims_conv1_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(conv1_relu);
    vx_size dims_pool1[4] = { 56, 56, 64, 1 };
    vx_tensor pool1 = vxCreateVirtualTensor(graph, 4, dims_pool1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(pool1);
    vx_size dims_res2a_branch1[4] = { 56, 56, 256, 1 };
    vx_tensor res2a_branch1 = vxCreateVirtualTensor(graph, 4, dims_res2a_branch1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2a_branch1);
    vx_size dims_scale2a_branch1[4] = { 56, 56, 256, 1 };
    vx_tensor scale2a_branch1 = vxCreateVirtualTensor(graph, 4, dims_scale2a_branch1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale2a_branch1);
    vx_size dims_res2a_branch2a[4] = { 56, 56, 64, 1 };
    vx_tensor res2a_branch2a = vxCreateVirtualTensor(graph, 4, dims_res2a_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2a_branch2a);
    vx_size dims_scale2a_branch2a[4] = { 56, 56, 64, 1 };
    vx_tensor scale2a_branch2a = vxCreateVirtualTensor(graph, 4, dims_scale2a_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale2a_branch2a);
    vx_size dims_res2a_branch2a_relu[4] = { 56, 56, 64, 1 };
    vx_tensor res2a_branch2a_relu = vxCreateVirtualTensor(graph, 4, dims_res2a_branch2a_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2a_branch2a_relu);
    vx_size dims_res2a_branch2b[4] = { 56, 56, 64, 1 };
    vx_tensor res2a_branch2b = vxCreateVirtualTensor(graph, 4, dims_res2a_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2a_branch2b);
    vx_size dims_scale2a_branch2b[4] = { 56, 56, 64, 1 };
    vx_tensor scale2a_branch2b = vxCreateVirtualTensor(graph, 4, dims_scale2a_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale2a_branch2b);
    vx_size dims_res2a_branch2b_relu[4] = { 56, 56, 64, 1 };
    vx_tensor res2a_branch2b_relu = vxCreateVirtualTensor(graph, 4, dims_res2a_branch2b_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2a_branch2b_relu);
    vx_size dims_res2a_branch2c[4] = { 56, 56, 256, 1 };
    vx_tensor res2a_branch2c = vxCreateVirtualTensor(graph, 4, dims_res2a_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2a_branch2c);
    vx_size dims_scale2a_branch2c[4] = { 56, 56, 256, 1 };
    vx_tensor scale2a_branch2c = vxCreateVirtualTensor(graph, 4, dims_scale2a_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale2a_branch2c);
    vx_size dims_res2a[4] = { 56, 56, 256, 1 };
    vx_tensor res2a = vxCreateVirtualTensor(graph, 4, dims_res2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2a);
    vx_size dims_res2a_relu[4] = { 56, 56, 256, 1 };
    vx_tensor res2a_relu = vxCreateVirtualTensor(graph, 4, dims_res2a_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2a_relu);
    vx_size dims_res2b_branch2a[4] = { 56, 56, 64, 1 };
    vx_tensor res2b_branch2a = vxCreateVirtualTensor(graph, 4, dims_res2b_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2b_branch2a);
    vx_size dims_scale2b_branch2a[4] = { 56, 56, 64, 1 };
    vx_tensor scale2b_branch2a = vxCreateVirtualTensor(graph, 4, dims_scale2b_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale2b_branch2a);
    vx_size dims_res2b_branch2a_relu[4] = { 56, 56, 64, 1 };
    vx_tensor res2b_branch2a_relu = vxCreateVirtualTensor(graph, 4, dims_res2b_branch2a_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2b_branch2a_relu);
    vx_size dims_res2b_branch2b[4] = { 56, 56, 64, 1 };
    vx_tensor res2b_branch2b = vxCreateVirtualTensor(graph, 4, dims_res2b_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2b_branch2b);
    vx_size dims_scale2b_branch2b[4] = { 56, 56, 64, 1 };
    vx_tensor scale2b_branch2b = vxCreateVirtualTensor(graph, 4, dims_scale2b_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale2b_branch2b);
    vx_size dims_res2b_branch2b_relu[4] = { 56, 56, 64, 1 };
    vx_tensor res2b_branch2b_relu = vxCreateVirtualTensor(graph, 4, dims_res2b_branch2b_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2b_branch2b_relu);
    vx_size dims_res2b_branch2c[4] = { 56, 56, 256, 1 };
    vx_tensor res2b_branch2c = vxCreateVirtualTensor(graph, 4, dims_res2b_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2b_branch2c);
    vx_size dims_scale2b_branch2c[4] = { 56, 56, 256, 1 };
    vx_tensor scale2b_branch2c = vxCreateVirtualTensor(graph, 4, dims_scale2b_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale2b_branch2c);
    vx_size dims_res2b[4] = { 56, 56, 256, 1 };
    vx_tensor res2b = vxCreateVirtualTensor(graph, 4, dims_res2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2b);
    vx_size dims_res2b_relu[4] = { 56, 56, 256, 1 };
    vx_tensor res2b_relu = vxCreateVirtualTensor(graph, 4, dims_res2b_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2b_relu);
    vx_size dims_res2c_branch2a[4] = { 56, 56, 64, 1 };
    vx_tensor res2c_branch2a = vxCreateVirtualTensor(graph, 4, dims_res2c_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2c_branch2a);
    vx_size dims_scale2c_branch2a[4] = { 56, 56, 64, 1 };
    vx_tensor scale2c_branch2a = vxCreateVirtualTensor(graph, 4, dims_scale2c_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale2c_branch2a);
    vx_size dims_res2c_branch2a_relu[4] = { 56, 56, 64, 1 };
    vx_tensor res2c_branch2a_relu = vxCreateVirtualTensor(graph, 4, dims_res2c_branch2a_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2c_branch2a_relu);
    vx_size dims_res2c_branch2b[4] = { 56, 56, 64, 1 };
    vx_tensor res2c_branch2b = vxCreateVirtualTensor(graph, 4, dims_res2c_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2c_branch2b);
    vx_size dims_scale2c_branch2b[4] = { 56, 56, 64, 1 };
    vx_tensor scale2c_branch2b = vxCreateVirtualTensor(graph, 4, dims_scale2c_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale2c_branch2b);
    vx_size dims_res2c_branch2b_relu[4] = { 56, 56, 64, 1 };
    vx_tensor res2c_branch2b_relu = vxCreateVirtualTensor(graph, 4, dims_res2c_branch2b_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2c_branch2b_relu);
    vx_size dims_res2c_branch2c[4] = { 56, 56, 256, 1 };
    vx_tensor res2c_branch2c = vxCreateVirtualTensor(graph, 4, dims_res2c_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2c_branch2c);
    vx_size dims_scale2c_branch2c[4] = { 56, 56, 256, 1 };
    vx_tensor scale2c_branch2c = vxCreateVirtualTensor(graph, 4, dims_scale2c_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale2c_branch2c);
    vx_size dims_res2c[4] = { 56, 56, 256, 1 };
    vx_tensor res2c = vxCreateVirtualTensor(graph, 4, dims_res2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2c);
    vx_size dims_res2c_relu[4] = { 56, 56, 256, 1 };
    vx_tensor res2c_relu = vxCreateVirtualTensor(graph, 4, dims_res2c_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res2c_relu);
    vx_size dims_res3a_branch1[4] = { 28, 28, 512, 1 };
    vx_tensor res3a_branch1 = vxCreateVirtualTensor(graph, 4, dims_res3a_branch1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3a_branch1);
    vx_size dims_scale3a_branch1[4] = { 28, 28, 512, 1 };
    vx_tensor scale3a_branch1 = vxCreateVirtualTensor(graph, 4, dims_scale3a_branch1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3a_branch1);
    vx_size dims_res3a_branch2a[4] = { 28, 28, 128, 1 };
    vx_tensor res3a_branch2a = vxCreateVirtualTensor(graph, 4, dims_res3a_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3a_branch2a);
    vx_size dims_scale3a_branch2a[4] = { 28, 28, 128, 1 };
    vx_tensor scale3a_branch2a = vxCreateVirtualTensor(graph, 4, dims_scale3a_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3a_branch2a);
    vx_size dims_res3a_branch2a_relu[4] = { 28, 28, 128, 1 };
    vx_tensor res3a_branch2a_relu = vxCreateVirtualTensor(graph, 4, dims_res3a_branch2a_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3a_branch2a_relu);
    vx_size dims_res3a_branch2b[4] = { 28, 28, 128, 1 };
    vx_tensor res3a_branch2b = vxCreateVirtualTensor(graph, 4, dims_res3a_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3a_branch2b);
    vx_size dims_scale3a_branch2b[4] = { 28, 28, 128, 1 };
    vx_tensor scale3a_branch2b = vxCreateVirtualTensor(graph, 4, dims_scale3a_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3a_branch2b);
    vx_size dims_res3a_branch2b_relu[4] = { 28, 28, 128, 1 };
    vx_tensor res3a_branch2b_relu = vxCreateVirtualTensor(graph, 4, dims_res3a_branch2b_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3a_branch2b_relu);
    vx_size dims_res3a_branch2c[4] = { 28, 28, 512, 1 };
    vx_tensor res3a_branch2c = vxCreateVirtualTensor(graph, 4, dims_res3a_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3a_branch2c);
    vx_size dims_scale3a_branch2c[4] = { 28, 28, 512, 1 };
    vx_tensor scale3a_branch2c = vxCreateVirtualTensor(graph, 4, dims_scale3a_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3a_branch2c);
    vx_size dims_res3a[4] = { 28, 28, 512, 1 };
    vx_tensor res3a = vxCreateVirtualTensor(graph, 4, dims_res3a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3a);
    vx_size dims_res3a_relu[4] = { 28, 28, 512, 1 };
    vx_tensor res3a_relu = vxCreateVirtualTensor(graph, 4, dims_res3a_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3a_relu);
    vx_size dims_res3b_branch2a[4] = { 28, 28, 128, 1 };
    vx_tensor res3b_branch2a = vxCreateVirtualTensor(graph, 4, dims_res3b_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3b_branch2a);
    vx_size dims_scale3b_branch2a[4] = { 28, 28, 128, 1 };
    vx_tensor scale3b_branch2a = vxCreateVirtualTensor(graph, 4, dims_scale3b_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3b_branch2a);
    vx_size dims_res3b_branch2a_relu[4] = { 28, 28, 128, 1 };
    vx_tensor res3b_branch2a_relu = vxCreateVirtualTensor(graph, 4, dims_res3b_branch2a_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3b_branch2a_relu);
    vx_size dims_res3b_branch2b[4] = { 28, 28, 128, 1 };
    vx_tensor res3b_branch2b = vxCreateVirtualTensor(graph, 4, dims_res3b_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3b_branch2b);
    vx_size dims_scale3b_branch2b[4] = { 28, 28, 128, 1 };
    vx_tensor scale3b_branch2b = vxCreateVirtualTensor(graph, 4, dims_scale3b_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3b_branch2b);
    vx_size dims_res3b_branch2b_relu[4] = { 28, 28, 128, 1 };
    vx_tensor res3b_branch2b_relu = vxCreateVirtualTensor(graph, 4, dims_res3b_branch2b_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3b_branch2b_relu);
    vx_size dims_res3b_branch2c[4] = { 28, 28, 512, 1 };
    vx_tensor res3b_branch2c = vxCreateVirtualTensor(graph, 4, dims_res3b_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3b_branch2c);
    vx_size dims_scale3b_branch2c[4] = { 28, 28, 512, 1 };
    vx_tensor scale3b_branch2c = vxCreateVirtualTensor(graph, 4, dims_scale3b_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3b_branch2c);
    vx_size dims_res3b[4] = { 28, 28, 512, 1 };
    vx_tensor res3b = vxCreateVirtualTensor(graph, 4, dims_res3b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3b);
    vx_size dims_res3b_relu[4] = { 28, 28, 512, 1 };
    vx_tensor res3b_relu = vxCreateVirtualTensor(graph, 4, dims_res3b_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3b_relu);
    vx_size dims_res3c_branch2a[4] = { 28, 28, 128, 1 };
    vx_tensor res3c_branch2a = vxCreateVirtualTensor(graph, 4, dims_res3c_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3c_branch2a);
    vx_size dims_scale3c_branch2a[4] = { 28, 28, 128, 1 };
    vx_tensor scale3c_branch2a = vxCreateVirtualTensor(graph, 4, dims_scale3c_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3c_branch2a);
    vx_size dims_res3c_branch2a_relu[4] = { 28, 28, 128, 1 };
    vx_tensor res3c_branch2a_relu = vxCreateVirtualTensor(graph, 4, dims_res3c_branch2a_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3c_branch2a_relu);
    vx_size dims_res3c_branch2b[4] = { 28, 28, 128, 1 };
    vx_tensor res3c_branch2b = vxCreateVirtualTensor(graph, 4, dims_res3c_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3c_branch2b);
    vx_size dims_scale3c_branch2b[4] = { 28, 28, 128, 1 };
    vx_tensor scale3c_branch2b = vxCreateVirtualTensor(graph, 4, dims_scale3c_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3c_branch2b);
    vx_size dims_res3c_branch2b_relu[4] = { 28, 28, 128, 1 };
    vx_tensor res3c_branch2b_relu = vxCreateVirtualTensor(graph, 4, dims_res3c_branch2b_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3c_branch2b_relu);
    vx_size dims_res3c_branch2c[4] = { 28, 28, 512, 1 };
    vx_tensor res3c_branch2c = vxCreateVirtualTensor(graph, 4, dims_res3c_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3c_branch2c);
    vx_size dims_scale3c_branch2c[4] = { 28, 28, 512, 1 };
    vx_tensor scale3c_branch2c = vxCreateVirtualTensor(graph, 4, dims_scale3c_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3c_branch2c);
    vx_size dims_res3c[4] = { 28, 28, 512, 1 };
    vx_tensor res3c = vxCreateVirtualTensor(graph, 4, dims_res3c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3c);
    vx_size dims_res3c_relu[4] = { 28, 28, 512, 1 };
    vx_tensor res3c_relu = vxCreateVirtualTensor(graph, 4, dims_res3c_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3c_relu);
    vx_size dims_res3d_branch2a[4] = { 28, 28, 128, 1 };
    vx_tensor res3d_branch2a = vxCreateVirtualTensor(graph, 4, dims_res3d_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3d_branch2a);
    vx_size dims_scale3d_branch2a[4] = { 28, 28, 128, 1 };
    vx_tensor scale3d_branch2a = vxCreateVirtualTensor(graph, 4, dims_scale3d_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3d_branch2a);
    vx_size dims_res3d_branch2a_relu[4] = { 28, 28, 128, 1 };
    vx_tensor res3d_branch2a_relu = vxCreateVirtualTensor(graph, 4, dims_res3d_branch2a_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3d_branch2a_relu);
    vx_size dims_res3d_branch2b[4] = { 28, 28, 128, 1 };
    vx_tensor res3d_branch2b = vxCreateVirtualTensor(graph, 4, dims_res3d_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3d_branch2b);
    vx_size dims_scale3d_branch2b[4] = { 28, 28, 128, 1 };
    vx_tensor scale3d_branch2b = vxCreateVirtualTensor(graph, 4, dims_scale3d_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3d_branch2b);
    vx_size dims_res3d_branch2b_relu[4] = { 28, 28, 128, 1 };
    vx_tensor res3d_branch2b_relu = vxCreateVirtualTensor(graph, 4, dims_res3d_branch2b_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3d_branch2b_relu);
    vx_size dims_res3d_branch2c[4] = { 28, 28, 512, 1 };
    vx_tensor res3d_branch2c = vxCreateVirtualTensor(graph, 4, dims_res3d_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3d_branch2c);
    vx_size dims_scale3d_branch2c[4] = { 28, 28, 512, 1 };
    vx_tensor scale3d_branch2c = vxCreateVirtualTensor(graph, 4, dims_scale3d_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale3d_branch2c);
    vx_size dims_res3d[4] = { 28, 28, 512, 1 };
    vx_tensor res3d = vxCreateVirtualTensor(graph, 4, dims_res3d, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3d);
    vx_size dims_res3d_relu[4] = { 28, 28, 512, 1 };
    vx_tensor res3d_relu = vxCreateVirtualTensor(graph, 4, dims_res3d_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res3d_relu);
    vx_size dims_res4a_branch1[4] = { 14, 14, 1024, 1 };
    vx_tensor res4a_branch1 = vxCreateVirtualTensor(graph, 4, dims_res4a_branch1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4a_branch1);
    vx_size dims_scale4a_branch1[4] = { 14, 14, 1024, 1 };
    vx_tensor scale4a_branch1 = vxCreateVirtualTensor(graph, 4, dims_scale4a_branch1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4a_branch1);
    vx_size dims_res4a_branch2a[4] = { 14, 14, 256, 1 };
    vx_tensor res4a_branch2a = vxCreateVirtualTensor(graph, 4, dims_res4a_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4a_branch2a);
    vx_size dims_scale4a_branch2a[4] = { 14, 14, 256, 1 };
    vx_tensor scale4a_branch2a = vxCreateVirtualTensor(graph, 4, dims_scale4a_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4a_branch2a);
    vx_size dims_res4a_branch2a_relu[4] = { 14, 14, 256, 1 };
    vx_tensor res4a_branch2a_relu = vxCreateVirtualTensor(graph, 4, dims_res4a_branch2a_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4a_branch2a_relu);
    vx_size dims_res4a_branch2b[4] = { 14, 14, 256, 1 };
    vx_tensor res4a_branch2b = vxCreateVirtualTensor(graph, 4, dims_res4a_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4a_branch2b);
    vx_size dims_scale4a_branch2b[4] = { 14, 14, 256, 1 };
    vx_tensor scale4a_branch2b = vxCreateVirtualTensor(graph, 4, dims_scale4a_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4a_branch2b);
    vx_size dims_res4a_branch2b_relu[4] = { 14, 14, 256, 1 };
    vx_tensor res4a_branch2b_relu = vxCreateVirtualTensor(graph, 4, dims_res4a_branch2b_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4a_branch2b_relu);
    vx_size dims_res4a_branch2c[4] = { 14, 14, 1024, 1 };
    vx_tensor res4a_branch2c = vxCreateVirtualTensor(graph, 4, dims_res4a_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4a_branch2c);
    vx_size dims_scale4a_branch2c[4] = { 14, 14, 1024, 1 };
    vx_tensor scale4a_branch2c = vxCreateVirtualTensor(graph, 4, dims_scale4a_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4a_branch2c);
    vx_size dims_res4a[4] = { 14, 14, 1024, 1 };
    vx_tensor res4a = vxCreateVirtualTensor(graph, 4, dims_res4a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4a);
    vx_size dims_res4a_relu[4] = { 14, 14, 1024, 1 };
    vx_tensor res4a_relu = vxCreateVirtualTensor(graph, 4, dims_res4a_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4a_relu);
    vx_size dims_res4b_branch2a[4] = { 14, 14, 256, 1 };
    vx_tensor res4b_branch2a = vxCreateVirtualTensor(graph, 4, dims_res4b_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4b_branch2a);
    vx_size dims_scale4b_branch2a[4] = { 14, 14, 256, 1 };
    vx_tensor scale4b_branch2a = vxCreateVirtualTensor(graph, 4, dims_scale4b_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4b_branch2a);
    vx_size dims_res4b_branch2a_relu[4] = { 14, 14, 256, 1 };
    vx_tensor res4b_branch2a_relu = vxCreateVirtualTensor(graph, 4, dims_res4b_branch2a_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4b_branch2a_relu);
    vx_size dims_res4b_branch2b[4] = { 14, 14, 256, 1 };
    vx_tensor res4b_branch2b = vxCreateVirtualTensor(graph, 4, dims_res4b_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4b_branch2b);
    vx_size dims_scale4b_branch2b[4] = { 14, 14, 256, 1 };
    vx_tensor scale4b_branch2b = vxCreateVirtualTensor(graph, 4, dims_scale4b_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4b_branch2b);
    vx_size dims_res4b_branch2b_relu[4] = { 14, 14, 256, 1 };
    vx_tensor res4b_branch2b_relu = vxCreateVirtualTensor(graph, 4, dims_res4b_branch2b_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4b_branch2b_relu);
    vx_size dims_res4b_branch2c[4] = { 14, 14, 1024, 1 };
    vx_tensor res4b_branch2c = vxCreateVirtualTensor(graph, 4, dims_res4b_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4b_branch2c);
    vx_size dims_scale4b_branch2c[4] = { 14, 14, 1024, 1 };
    vx_tensor scale4b_branch2c = vxCreateVirtualTensor(graph, 4, dims_scale4b_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4b_branch2c);
    vx_size dims_res4b[4] = { 14, 14, 1024, 1 };
    vx_tensor res4b = vxCreateVirtualTensor(graph, 4, dims_res4b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4b);
    vx_size dims_res4b_relu[4] = { 14, 14, 1024, 1 };
    vx_tensor res4b_relu = vxCreateVirtualTensor(graph, 4, dims_res4b_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4b_relu);
    vx_size dims_res4c_branch2a[4] = { 14, 14, 256, 1 };
    vx_tensor res4c_branch2a = vxCreateVirtualTensor(graph, 4, dims_res4c_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4c_branch2a);
    vx_size dims_scale4c_branch2a[4] = { 14, 14, 256, 1 };
    vx_tensor scale4c_branch2a = vxCreateVirtualTensor(graph, 4, dims_scale4c_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4c_branch2a);
    vx_size dims_res4c_branch2a_relu[4] = { 14, 14, 256, 1 };
    vx_tensor res4c_branch2a_relu = vxCreateVirtualTensor(graph, 4, dims_res4c_branch2a_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4c_branch2a_relu);
    vx_size dims_res4c_branch2b[4] = { 14, 14, 256, 1 };
    vx_tensor res4c_branch2b = vxCreateVirtualTensor(graph, 4, dims_res4c_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4c_branch2b);
    vx_size dims_scale4c_branch2b[4] = { 14, 14, 256, 1 };
    vx_tensor scale4c_branch2b = vxCreateVirtualTensor(graph, 4, dims_scale4c_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4c_branch2b);
    vx_size dims_res4c_branch2b_relu[4] = { 14, 14, 256, 1 };
    vx_tensor res4c_branch2b_relu = vxCreateVirtualTensor(graph, 4, dims_res4c_branch2b_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4c_branch2b_relu);
    vx_size dims_res4c_branch2c[4] = { 14, 14, 1024, 1 };
    vx_tensor res4c_branch2c = vxCreateVirtualTensor(graph, 4, dims_res4c_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4c_branch2c);
    vx_size dims_scale4c_branch2c[4] = { 14, 14, 1024, 1 };
    vx_tensor scale4c_branch2c = vxCreateVirtualTensor(graph, 4, dims_scale4c_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4c_branch2c);
    vx_size dims_res4c[4] = { 14, 14, 1024, 1 };
    vx_tensor res4c = vxCreateVirtualTensor(graph, 4, dims_res4c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4c);
    vx_size dims_res4c_relu[4] = { 14, 14, 1024, 1 };
    vx_tensor res4c_relu = vxCreateVirtualTensor(graph, 4, dims_res4c_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4c_relu);
    vx_size dims_res4d_branch2a[4] = { 14, 14, 256, 1 };
    vx_tensor res4d_branch2a = vxCreateVirtualTensor(graph, 4, dims_res4d_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4d_branch2a);
    vx_size dims_scale4d_branch2a[4] = { 14, 14, 256, 1 };
    vx_tensor scale4d_branch2a = vxCreateVirtualTensor(graph, 4, dims_scale4d_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4d_branch2a);
    vx_size dims_res4d_branch2a_relu[4] = { 14, 14, 256, 1 };
    vx_tensor res4d_branch2a_relu = vxCreateVirtualTensor(graph, 4, dims_res4d_branch2a_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4d_branch2a_relu);
    vx_size dims_res4d_branch2b[4] = { 14, 14, 256, 1 };
    vx_tensor res4d_branch2b = vxCreateVirtualTensor(graph, 4, dims_res4d_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4d_branch2b);
    vx_size dims_scale4d_branch2b[4] = { 14, 14, 256, 1 };
    vx_tensor scale4d_branch2b = vxCreateVirtualTensor(graph, 4, dims_scale4d_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4d_branch2b);
    vx_size dims_res4d_branch2b_relu[4] = { 14, 14, 256, 1 };
    vx_tensor res4d_branch2b_relu = vxCreateVirtualTensor(graph, 4, dims_res4d_branch2b_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4d_branch2b_relu);
    vx_size dims_res4d_branch2c[4] = { 14, 14, 1024, 1 };
    vx_tensor res4d_branch2c = vxCreateVirtualTensor(graph, 4, dims_res4d_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4d_branch2c);
    vx_size dims_scale4d_branch2c[4] = { 14, 14, 1024, 1 };
    vx_tensor scale4d_branch2c = vxCreateVirtualTensor(graph, 4, dims_scale4d_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4d_branch2c);
    vx_size dims_res4d[4] = { 14, 14, 1024, 1 };
    vx_tensor res4d = vxCreateVirtualTensor(graph, 4, dims_res4d, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4d);
    vx_size dims_res4d_relu[4] = { 14, 14, 1024, 1 };
    vx_tensor res4d_relu = vxCreateVirtualTensor(graph, 4, dims_res4d_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4d_relu);
    vx_size dims_res4e_branch2a[4] = { 14, 14, 256, 1 };
    vx_tensor res4e_branch2a = vxCreateVirtualTensor(graph, 4, dims_res4e_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4e_branch2a);
    vx_size dims_scale4e_branch2a[4] = { 14, 14, 256, 1 };
    vx_tensor scale4e_branch2a = vxCreateVirtualTensor(graph, 4, dims_scale4e_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4e_branch2a);
    vx_size dims_res4e_branch2a_relu[4] = { 14, 14, 256, 1 };
    vx_tensor res4e_branch2a_relu = vxCreateVirtualTensor(graph, 4, dims_res4e_branch2a_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4e_branch2a_relu);
    vx_size dims_res4e_branch2b[4] = { 14, 14, 256, 1 };
    vx_tensor res4e_branch2b = vxCreateVirtualTensor(graph, 4, dims_res4e_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4e_branch2b);
    vx_size dims_scale4e_branch2b[4] = { 14, 14, 256, 1 };
    vx_tensor scale4e_branch2b = vxCreateVirtualTensor(graph, 4, dims_scale4e_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4e_branch2b);
    vx_size dims_res4e_branch2b_relu[4] = { 14, 14, 256, 1 };
    vx_tensor res4e_branch2b_relu = vxCreateVirtualTensor(graph, 4, dims_res4e_branch2b_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4e_branch2b_relu);
    vx_size dims_res4e_branch2c[4] = { 14, 14, 1024, 1 };
    vx_tensor res4e_branch2c = vxCreateVirtualTensor(graph, 4, dims_res4e_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4e_branch2c);
    vx_size dims_scale4e_branch2c[4] = { 14, 14, 1024, 1 };
    vx_tensor scale4e_branch2c = vxCreateVirtualTensor(graph, 4, dims_scale4e_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4e_branch2c);
    vx_size dims_res4e[4] = { 14, 14, 1024, 1 };
    vx_tensor res4e = vxCreateVirtualTensor(graph, 4, dims_res4e, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4e);
    vx_size dims_res4e_relu[4] = { 14, 14, 1024, 1 };
    vx_tensor res4e_relu = vxCreateVirtualTensor(graph, 4, dims_res4e_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4e_relu);
    vx_size dims_res4f_branch2a[4] = { 14, 14, 256, 1 };
    vx_tensor res4f_branch2a = vxCreateVirtualTensor(graph, 4, dims_res4f_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4f_branch2a);
    vx_size dims_scale4f_branch2a[4] = { 14, 14, 256, 1 };
    vx_tensor scale4f_branch2a = vxCreateVirtualTensor(graph, 4, dims_scale4f_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4f_branch2a);
    vx_size dims_res4f_branch2a_relu[4] = { 14, 14, 256, 1 };
    vx_tensor res4f_branch2a_relu = vxCreateVirtualTensor(graph, 4, dims_res4f_branch2a_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4f_branch2a_relu);
    vx_size dims_res4f_branch2b[4] = { 14, 14, 256, 1 };
    vx_tensor res4f_branch2b = vxCreateVirtualTensor(graph, 4, dims_res4f_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4f_branch2b);
    vx_size dims_scale4f_branch2b[4] = { 14, 14, 256, 1 };
    vx_tensor scale4f_branch2b = vxCreateVirtualTensor(graph, 4, dims_scale4f_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4f_branch2b);
    vx_size dims_res4f_branch2b_relu[4] = { 14, 14, 256, 1 };
    vx_tensor res4f_branch2b_relu = vxCreateVirtualTensor(graph, 4, dims_res4f_branch2b_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4f_branch2b_relu);
    vx_size dims_res4f_branch2c[4] = { 14, 14, 1024, 1 };
    vx_tensor res4f_branch2c = vxCreateVirtualTensor(graph, 4, dims_res4f_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4f_branch2c);
    vx_size dims_scale4f_branch2c[4] = { 14, 14, 1024, 1 };
    vx_tensor scale4f_branch2c = vxCreateVirtualTensor(graph, 4, dims_scale4f_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale4f_branch2c);
    vx_size dims_res4f[4] = { 14, 14, 1024, 1 };
    vx_tensor res4f = vxCreateVirtualTensor(graph, 4, dims_res4f, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4f);
    vx_size dims_res4f_relu[4] = { 14, 14, 1024, 1 };
    vx_tensor res4f_relu = vxCreateVirtualTensor(graph, 4, dims_res4f_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res4f_relu);
    vx_size dims_res5a_branch1[4] = { 7, 7, 2048, 1 };
    vx_tensor res5a_branch1 = vxCreateVirtualTensor(graph, 4, dims_res5a_branch1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5a_branch1);
    vx_size dims_scale5a_branch1[4] = { 7, 7, 2048, 1 };
    vx_tensor scale5a_branch1 = vxCreateVirtualTensor(graph, 4, dims_scale5a_branch1, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale5a_branch1);
    vx_size dims_res5a_branch2a[4] = { 7, 7, 512, 1 };
    vx_tensor res5a_branch2a = vxCreateVirtualTensor(graph, 4, dims_res5a_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5a_branch2a);
    vx_size dims_scale5a_branch2a[4] = { 7, 7, 512, 1 };
    vx_tensor scale5a_branch2a = vxCreateVirtualTensor(graph, 4, dims_scale5a_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale5a_branch2a);
    vx_size dims_res5a_branch2a_relu[4] = { 7, 7, 512, 1 };
    vx_tensor res5a_branch2a_relu = vxCreateVirtualTensor(graph, 4, dims_res5a_branch2a_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5a_branch2a_relu);
    vx_size dims_res5a_branch2b[4] = { 7, 7, 512, 1 };
    vx_tensor res5a_branch2b = vxCreateVirtualTensor(graph, 4, dims_res5a_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5a_branch2b);
    vx_size dims_scale5a_branch2b[4] = { 7, 7, 512, 1 };
    vx_tensor scale5a_branch2b = vxCreateVirtualTensor(graph, 4, dims_scale5a_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale5a_branch2b);
    vx_size dims_res5a_branch2b_relu[4] = { 7, 7, 512, 1 };
    vx_tensor res5a_branch2b_relu = vxCreateVirtualTensor(graph, 4, dims_res5a_branch2b_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5a_branch2b_relu);
    vx_size dims_res5a_branch2c[4] = { 7, 7, 2048, 1 };
    vx_tensor res5a_branch2c = vxCreateVirtualTensor(graph, 4, dims_res5a_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5a_branch2c);
    vx_size dims_scale5a_branch2c[4] = { 7, 7, 2048, 1 };
    vx_tensor scale5a_branch2c = vxCreateVirtualTensor(graph, 4, dims_scale5a_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale5a_branch2c);
    vx_size dims_res5a[4] = { 7, 7, 2048, 1 };
    vx_tensor res5a = vxCreateVirtualTensor(graph, 4, dims_res5a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5a);
    vx_size dims_res5a_relu[4] = { 7, 7, 2048, 1 };
    vx_tensor res5a_relu = vxCreateVirtualTensor(graph, 4, dims_res5a_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5a_relu);
    vx_size dims_res5b_branch2a[4] = { 7, 7, 512, 1 };
    vx_tensor res5b_branch2a = vxCreateVirtualTensor(graph, 4, dims_res5b_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5b_branch2a);
    vx_size dims_scale5b_branch2a[4] = { 7, 7, 512, 1 };
    vx_tensor scale5b_branch2a = vxCreateVirtualTensor(graph, 4, dims_scale5b_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale5b_branch2a);
    vx_size dims_res5b_branch2a_relu[4] = { 7, 7, 512, 1 };
    vx_tensor res5b_branch2a_relu = vxCreateVirtualTensor(graph, 4, dims_res5b_branch2a_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5b_branch2a_relu);
    vx_size dims_res5b_branch2b[4] = { 7, 7, 512, 1 };
    vx_tensor res5b_branch2b = vxCreateVirtualTensor(graph, 4, dims_res5b_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5b_branch2b);
    vx_size dims_scale5b_branch2b[4] = { 7, 7, 512, 1 };
    vx_tensor scale5b_branch2b = vxCreateVirtualTensor(graph, 4, dims_scale5b_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale5b_branch2b);
    vx_size dims_res5b_branch2b_relu[4] = { 7, 7, 512, 1 };
    vx_tensor res5b_branch2b_relu = vxCreateVirtualTensor(graph, 4, dims_res5b_branch2b_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5b_branch2b_relu);
    vx_size dims_res5b_branch2c[4] = { 7, 7, 2048, 1 };
    vx_tensor res5b_branch2c = vxCreateVirtualTensor(graph, 4, dims_res5b_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5b_branch2c);
    vx_size dims_scale5b_branch2c[4] = { 7, 7, 2048, 1 };
    vx_tensor scale5b_branch2c = vxCreateVirtualTensor(graph, 4, dims_scale5b_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale5b_branch2c);
    vx_size dims_res5b[4] = { 7, 7, 2048, 1 };
    vx_tensor res5b = vxCreateVirtualTensor(graph, 4, dims_res5b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5b);
    vx_size dims_res5b_relu[4] = { 7, 7, 2048, 1 };
    vx_tensor res5b_relu = vxCreateVirtualTensor(graph, 4, dims_res5b_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5b_relu);
    vx_size dims_res5c_branch2a[4] = { 7, 7, 512, 1 };
    vx_tensor res5c_branch2a = vxCreateVirtualTensor(graph, 4, dims_res5c_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5c_branch2a);
    vx_size dims_scale5c_branch2a[4] = { 7, 7, 512, 1 };
    vx_tensor scale5c_branch2a = vxCreateVirtualTensor(graph, 4, dims_scale5c_branch2a, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale5c_branch2a);
    vx_size dims_res5c_branch2a_relu[4] = { 7, 7, 512, 1 };
    vx_tensor res5c_branch2a_relu = vxCreateVirtualTensor(graph, 4, dims_res5c_branch2a_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5c_branch2a_relu);
    vx_size dims_res5c_branch2b[4] = { 7, 7, 512, 1 };
    vx_tensor res5c_branch2b = vxCreateVirtualTensor(graph, 4, dims_res5c_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5c_branch2b);
    vx_size dims_scale5c_branch2b[4] = { 7, 7, 512, 1 };
    vx_tensor scale5c_branch2b = vxCreateVirtualTensor(graph, 4, dims_scale5c_branch2b, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale5c_branch2b);
    vx_size dims_res5c_branch2b_relu[4] = { 7, 7, 512, 1 };
    vx_tensor res5c_branch2b_relu = vxCreateVirtualTensor(graph, 4, dims_res5c_branch2b_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5c_branch2b_relu);
    vx_size dims_res5c_branch2c[4] = { 7, 7, 2048, 1 };
    vx_tensor res5c_branch2c = vxCreateVirtualTensor(graph, 4, dims_res5c_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5c_branch2c);
    vx_size dims_scale5c_branch2c[4] = { 7, 7, 2048, 1 };
    vx_tensor scale5c_branch2c = vxCreateVirtualTensor(graph, 4, dims_scale5c_branch2c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(scale5c_branch2c);
    vx_size dims_res5c[4] = { 7, 7, 2048, 1 };
    vx_tensor res5c = vxCreateVirtualTensor(graph, 4, dims_res5c, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5c);
    vx_size dims_res5c_relu[4] = { 7, 7, 2048, 1 };
    vx_tensor res5c_relu = vxCreateVirtualTensor(graph, 4, dims_res5c_relu, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(res5c_relu);
    vx_size dims_pool5[4] = { 1, 1, 2048, 1 };
    vx_tensor pool5 = vxCreateVirtualTensor(graph, 4, dims_pool5, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(pool5);
    vx_size dims_fc1000[4] = { 1, 1, 1000, 1 };
    vx_tensor fc1000 = vxCreateVirtualTensor(graph, 4, dims_fc1000, VX_TYPE_FLOAT32, 0);
    ERROR_CHECK_OBJECT(fc1000);

    // create nodes in graph

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 3;
      conv_params.padding_y = 3;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, data, conv1_w, conv1_b, &conv_params, sizeof(conv_params), conv1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, conv1, bn_conv1_w, bn_conv1_b, scale_conv1_w, scale_conv1_b, 1.000000e-05f, scale_conv1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale_conv1, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, conv1_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxPoolingLayer(graph, conv1_relu, VX_NN_POOLING_MAX, 3, 3, 0, 0, VX_ROUND_POLICY_TO_NEAREST_EVEN, pool1);
      ERROR_CHECK_OBJECT(node);
      vx_enum border_mode = 0;
      vx_scalar s_border_mode = vxCreateScalarWithSize(context, VX_TYPE_ENUM, &border_mode, sizeof(border_mode));
      ERROR_CHECK_OBJECT(s_border_mode);
      ERROR_CHECK_STATUS(vxSetParameterByIndex(node, 8, (vx_reference) s_border_mode));
      ERROR_CHECK_STATUS(vxReleaseScalar(&s_border_mode));
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, pool1, res2a_branch1_w, NULL, &conv_params, sizeof(conv_params), res2a_branch1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res2a_branch1, bn2a_branch1_w, bn2a_branch1_b, scale2a_branch1_w, scale2a_branch1_b, 1.000000e-05f, scale2a_branch1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, pool1, res2a_branch2a_w, NULL, &conv_params, sizeof(conv_params), res2a_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res2a_branch2a, bn2a_branch2a_w, bn2a_branch2a_b, scale2a_branch2a_w, scale2a_branch2a_b, 1.000000e-05f, scale2a_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale2a_branch2a, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res2a_branch2a_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res2a_branch2a_relu, res2a_branch2b_w, NULL, &conv_params, sizeof(conv_params), res2a_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res2a_branch2b, bn2a_branch2b_w, bn2a_branch2b_b, scale2a_branch2b_w, scale2a_branch2b_b, 1.000000e-05f, scale2a_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale2a_branch2b, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res2a_branch2b_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res2a_branch2b_relu, res2a_branch2c_w, NULL, &conv_params, sizeof(conv_params), res2a_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res2a_branch2c, bn2a_branch2c_w, bn2a_branch2c_b, scale2a_branch2c_w, scale2a_branch2c_b, 1.000000e-05f, scale2a_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxTensorAddNode(graph, scale2a_branch1, scale2a_branch2c, VX_CONVERT_POLICY_SATURATE, res2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, res2a, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res2a_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res2a_relu, res2b_branch2a_w, NULL, &conv_params, sizeof(conv_params), res2b_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res2b_branch2a, bn2b_branch2a_w, bn2b_branch2a_b, scale2b_branch2a_w, scale2b_branch2a_b, 1.000000e-05f, scale2b_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale2b_branch2a, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res2b_branch2a_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res2b_branch2a_relu, res2b_branch2b_w, NULL, &conv_params, sizeof(conv_params), res2b_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res2b_branch2b, bn2b_branch2b_w, bn2b_branch2b_b, scale2b_branch2b_w, scale2b_branch2b_b, 1.000000e-05f, scale2b_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale2b_branch2b, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res2b_branch2b_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res2b_branch2b_relu, res2b_branch2c_w, NULL, &conv_params, sizeof(conv_params), res2b_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res2b_branch2c, bn2b_branch2c_w, bn2b_branch2c_b, scale2b_branch2c_w, scale2b_branch2c_b, 1.000000e-05f, scale2b_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxTensorAddNode(graph, res2a_relu, scale2b_branch2c, VX_CONVERT_POLICY_SATURATE, res2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, res2b, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res2b_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res2b_relu, res2c_branch2a_w, NULL, &conv_params, sizeof(conv_params), res2c_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res2c_branch2a, bn2c_branch2a_w, bn2c_branch2a_b, scale2c_branch2a_w, scale2c_branch2a_b, 1.000000e-05f, scale2c_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale2c_branch2a, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res2c_branch2a_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res2c_branch2a_relu, res2c_branch2b_w, NULL, &conv_params, sizeof(conv_params), res2c_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res2c_branch2b, bn2c_branch2b_w, bn2c_branch2b_b, scale2c_branch2b_w, scale2c_branch2b_b, 1.000000e-05f, scale2c_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale2c_branch2b, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res2c_branch2b_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res2c_branch2b_relu, res2c_branch2c_w, NULL, &conv_params, sizeof(conv_params), res2c_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res2c_branch2c, bn2c_branch2c_w, bn2c_branch2c_b, scale2c_branch2c_w, scale2c_branch2c_b, 1.000000e-05f, scale2c_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxTensorAddNode(graph, res2b_relu, scale2c_branch2c, VX_CONVERT_POLICY_SATURATE, res2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, res2c, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res2c_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res2c_relu, res3a_branch1_w, NULL, &conv_params, sizeof(conv_params), res3a_branch1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res3a_branch1, bn3a_branch1_w, bn3a_branch1_b, scale3a_branch1_w, scale3a_branch1_b, 1.000000e-05f, scale3a_branch1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res2c_relu, res3a_branch2a_w, NULL, &conv_params, sizeof(conv_params), res3a_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res3a_branch2a, bn3a_branch2a_w, bn3a_branch2a_b, scale3a_branch2a_w, scale3a_branch2a_b, 1.000000e-05f, scale3a_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale3a_branch2a, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res3a_branch2a_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res3a_branch2a_relu, res3a_branch2b_w, NULL, &conv_params, sizeof(conv_params), res3a_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res3a_branch2b, bn3a_branch2b_w, bn3a_branch2b_b, scale3a_branch2b_w, scale3a_branch2b_b, 1.000000e-05f, scale3a_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale3a_branch2b, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res3a_branch2b_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res3a_branch2b_relu, res3a_branch2c_w, NULL, &conv_params, sizeof(conv_params), res3a_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res3a_branch2c, bn3a_branch2c_w, bn3a_branch2c_b, scale3a_branch2c_w, scale3a_branch2c_b, 1.000000e-05f, scale3a_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxTensorAddNode(graph, scale3a_branch1, scale3a_branch2c, VX_CONVERT_POLICY_SATURATE, res3a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, res3a, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res3a_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res3a_relu, res3b_branch2a_w, NULL, &conv_params, sizeof(conv_params), res3b_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res3b_branch2a, bn3b_branch2a_w, bn3b_branch2a_b, scale3b_branch2a_w, scale3b_branch2a_b, 1.000000e-05f, scale3b_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale3b_branch2a, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res3b_branch2a_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res3b_branch2a_relu, res3b_branch2b_w, NULL, &conv_params, sizeof(conv_params), res3b_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res3b_branch2b, bn3b_branch2b_w, bn3b_branch2b_b, scale3b_branch2b_w, scale3b_branch2b_b, 1.000000e-05f, scale3b_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale3b_branch2b, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res3b_branch2b_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res3b_branch2b_relu, res3b_branch2c_w, NULL, &conv_params, sizeof(conv_params), res3b_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res3b_branch2c, bn3b_branch2c_w, bn3b_branch2c_b, scale3b_branch2c_w, scale3b_branch2c_b, 1.000000e-05f, scale3b_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxTensorAddNode(graph, res3a_relu, scale3b_branch2c, VX_CONVERT_POLICY_SATURATE, res3b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, res3b, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res3b_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res3b_relu, res3c_branch2a_w, NULL, &conv_params, sizeof(conv_params), res3c_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res3c_branch2a, bn3c_branch2a_w, bn3c_branch2a_b, scale3c_branch2a_w, scale3c_branch2a_b, 1.000000e-05f, scale3c_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale3c_branch2a, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res3c_branch2a_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res3c_branch2a_relu, res3c_branch2b_w, NULL, &conv_params, sizeof(conv_params), res3c_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res3c_branch2b, bn3c_branch2b_w, bn3c_branch2b_b, scale3c_branch2b_w, scale3c_branch2b_b, 1.000000e-05f, scale3c_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale3c_branch2b, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res3c_branch2b_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res3c_branch2b_relu, res3c_branch2c_w, NULL, &conv_params, sizeof(conv_params), res3c_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res3c_branch2c, bn3c_branch2c_w, bn3c_branch2c_b, scale3c_branch2c_w, scale3c_branch2c_b, 1.000000e-05f, scale3c_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxTensorAddNode(graph, res3b_relu, scale3c_branch2c, VX_CONVERT_POLICY_SATURATE, res3c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, res3c, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res3c_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res3c_relu, res3d_branch2a_w, NULL, &conv_params, sizeof(conv_params), res3d_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res3d_branch2a, bn3d_branch2a_w, bn3d_branch2a_b, scale3d_branch2a_w, scale3d_branch2a_b, 1.000000e-05f, scale3d_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale3d_branch2a, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res3d_branch2a_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res3d_branch2a_relu, res3d_branch2b_w, NULL, &conv_params, sizeof(conv_params), res3d_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res3d_branch2b, bn3d_branch2b_w, bn3d_branch2b_b, scale3d_branch2b_w, scale3d_branch2b_b, 1.000000e-05f, scale3d_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale3d_branch2b, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res3d_branch2b_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res3d_branch2b_relu, res3d_branch2c_w, NULL, &conv_params, sizeof(conv_params), res3d_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res3d_branch2c, bn3d_branch2c_w, bn3d_branch2c_b, scale3d_branch2c_w, scale3d_branch2c_b, 1.000000e-05f, scale3d_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxTensorAddNode(graph, res3c_relu, scale3d_branch2c, VX_CONVERT_POLICY_SATURATE, res3d);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, res3d, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res3d_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res3d_relu, res4a_branch1_w, NULL, &conv_params, sizeof(conv_params), res4a_branch1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res4a_branch1, bn4a_branch1_w, bn4a_branch1_b, scale4a_branch1_w, scale4a_branch1_b, 1.000000e-05f, scale4a_branch1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res3d_relu, res4a_branch2a_w, NULL, &conv_params, sizeof(conv_params), res4a_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res4a_branch2a, bn4a_branch2a_w, bn4a_branch2a_b, scale4a_branch2a_w, scale4a_branch2a_b, 1.000000e-05f, scale4a_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale4a_branch2a, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res4a_branch2a_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res4a_branch2a_relu, res4a_branch2b_w, NULL, &conv_params, sizeof(conv_params), res4a_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res4a_branch2b, bn4a_branch2b_w, bn4a_branch2b_b, scale4a_branch2b_w, scale4a_branch2b_b, 1.000000e-05f, scale4a_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale4a_branch2b, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res4a_branch2b_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res4a_branch2b_relu, res4a_branch2c_w, NULL, &conv_params, sizeof(conv_params), res4a_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res4a_branch2c, bn4a_branch2c_w, bn4a_branch2c_b, scale4a_branch2c_w, scale4a_branch2c_b, 1.000000e-05f, scale4a_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxTensorAddNode(graph, scale4a_branch1, scale4a_branch2c, VX_CONVERT_POLICY_SATURATE, res4a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, res4a, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res4a_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res4a_relu, res4b_branch2a_w, NULL, &conv_params, sizeof(conv_params), res4b_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res4b_branch2a, bn4b_branch2a_w, bn4b_branch2a_b, scale4b_branch2a_w, scale4b_branch2a_b, 1.000000e-05f, scale4b_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale4b_branch2a, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res4b_branch2a_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res4b_branch2a_relu, res4b_branch2b_w, NULL, &conv_params, sizeof(conv_params), res4b_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res4b_branch2b, bn4b_branch2b_w, bn4b_branch2b_b, scale4b_branch2b_w, scale4b_branch2b_b, 1.000000e-05f, scale4b_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale4b_branch2b, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res4b_branch2b_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res4b_branch2b_relu, res4b_branch2c_w, NULL, &conv_params, sizeof(conv_params), res4b_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res4b_branch2c, bn4b_branch2c_w, bn4b_branch2c_b, scale4b_branch2c_w, scale4b_branch2c_b, 1.000000e-05f, scale4b_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxTensorAddNode(graph, res4a_relu, scale4b_branch2c, VX_CONVERT_POLICY_SATURATE, res4b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, res4b, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res4b_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res4b_relu, res4c_branch2a_w, NULL, &conv_params, sizeof(conv_params), res4c_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res4c_branch2a, bn4c_branch2a_w, bn4c_branch2a_b, scale4c_branch2a_w, scale4c_branch2a_b, 1.000000e-05f, scale4c_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale4c_branch2a, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res4c_branch2a_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res4c_branch2a_relu, res4c_branch2b_w, NULL, &conv_params, sizeof(conv_params), res4c_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res4c_branch2b, bn4c_branch2b_w, bn4c_branch2b_b, scale4c_branch2b_w, scale4c_branch2b_b, 1.000000e-05f, scale4c_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale4c_branch2b, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res4c_branch2b_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res4c_branch2b_relu, res4c_branch2c_w, NULL, &conv_params, sizeof(conv_params), res4c_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res4c_branch2c, bn4c_branch2c_w, bn4c_branch2c_b, scale4c_branch2c_w, scale4c_branch2c_b, 1.000000e-05f, scale4c_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxTensorAddNode(graph, res4b_relu, scale4c_branch2c, VX_CONVERT_POLICY_SATURATE, res4c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, res4c, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res4c_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res4c_relu, res4d_branch2a_w, NULL, &conv_params, sizeof(conv_params), res4d_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res4d_branch2a, bn4d_branch2a_w, bn4d_branch2a_b, scale4d_branch2a_w, scale4d_branch2a_b, 1.000000e-05f, scale4d_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale4d_branch2a, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res4d_branch2a_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res4d_branch2a_relu, res4d_branch2b_w, NULL, &conv_params, sizeof(conv_params), res4d_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res4d_branch2b, bn4d_branch2b_w, bn4d_branch2b_b, scale4d_branch2b_w, scale4d_branch2b_b, 1.000000e-05f, scale4d_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale4d_branch2b, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res4d_branch2b_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res4d_branch2b_relu, res4d_branch2c_w, NULL, &conv_params, sizeof(conv_params), res4d_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res4d_branch2c, bn4d_branch2c_w, bn4d_branch2c_b, scale4d_branch2c_w, scale4d_branch2c_b, 1.000000e-05f, scale4d_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxTensorAddNode(graph, res4c_relu, scale4d_branch2c, VX_CONVERT_POLICY_SATURATE, res4d);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, res4d, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res4d_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res4d_relu, res4e_branch2a_w, NULL, &conv_params, sizeof(conv_params), res4e_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res4e_branch2a, bn4e_branch2a_w, bn4e_branch2a_b, scale4e_branch2a_w, scale4e_branch2a_b, 1.000000e-05f, scale4e_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale4e_branch2a, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res4e_branch2a_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res4e_branch2a_relu, res4e_branch2b_w, NULL, &conv_params, sizeof(conv_params), res4e_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res4e_branch2b, bn4e_branch2b_w, bn4e_branch2b_b, scale4e_branch2b_w, scale4e_branch2b_b, 1.000000e-05f, scale4e_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale4e_branch2b, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res4e_branch2b_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res4e_branch2b_relu, res4e_branch2c_w, NULL, &conv_params, sizeof(conv_params), res4e_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res4e_branch2c, bn4e_branch2c_w, bn4e_branch2c_b, scale4e_branch2c_w, scale4e_branch2c_b, 1.000000e-05f, scale4e_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxTensorAddNode(graph, res4d_relu, scale4e_branch2c, VX_CONVERT_POLICY_SATURATE, res4e);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, res4e, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res4e_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res4e_relu, res4f_branch2a_w, NULL, &conv_params, sizeof(conv_params), res4f_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res4f_branch2a, bn4f_branch2a_w, bn4f_branch2a_b, scale4f_branch2a_w, scale4f_branch2a_b, 1.000000e-05f, scale4f_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale4f_branch2a, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res4f_branch2a_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res4f_branch2a_relu, res4f_branch2b_w, NULL, &conv_params, sizeof(conv_params), res4f_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res4f_branch2b, bn4f_branch2b_w, bn4f_branch2b_b, scale4f_branch2b_w, scale4f_branch2b_b, 1.000000e-05f, scale4f_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale4f_branch2b, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res4f_branch2b_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res4f_branch2b_relu, res4f_branch2c_w, NULL, &conv_params, sizeof(conv_params), res4f_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res4f_branch2c, bn4f_branch2c_w, bn4f_branch2c_b, scale4f_branch2c_w, scale4f_branch2c_b, 1.000000e-05f, scale4f_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxTensorAddNode(graph, res4e_relu, scale4f_branch2c, VX_CONVERT_POLICY_SATURATE, res4f);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, res4f, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res4f_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res4f_relu, res5a_branch1_w, NULL, &conv_params, sizeof(conv_params), res5a_branch1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res5a_branch1, bn5a_branch1_w, bn5a_branch1_b, scale5a_branch1_w, scale5a_branch1_b, 1.000000e-05f, scale5a_branch1);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res4f_relu, res5a_branch2a_w, NULL, &conv_params, sizeof(conv_params), res5a_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res5a_branch2a, bn5a_branch2a_w, bn5a_branch2a_b, scale5a_branch2a_w, scale5a_branch2a_b, 1.000000e-05f, scale5a_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale5a_branch2a, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res5a_branch2a_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res5a_branch2a_relu, res5a_branch2b_w, NULL, &conv_params, sizeof(conv_params), res5a_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res5a_branch2b, bn5a_branch2b_w, bn5a_branch2b_b, scale5a_branch2b_w, scale5a_branch2b_b, 1.000000e-05f, scale5a_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale5a_branch2b, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res5a_branch2b_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res5a_branch2b_relu, res5a_branch2c_w, NULL, &conv_params, sizeof(conv_params), res5a_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res5a_branch2c, bn5a_branch2c_w, bn5a_branch2c_b, scale5a_branch2c_w, scale5a_branch2c_b, 1.000000e-05f, scale5a_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxTensorAddNode(graph, scale5a_branch1, scale5a_branch2c, VX_CONVERT_POLICY_SATURATE, res5a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, res5a, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res5a_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res5a_relu, res5b_branch2a_w, NULL, &conv_params, sizeof(conv_params), res5b_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res5b_branch2a, bn5b_branch2a_w, bn5b_branch2a_b, scale5b_branch2a_w, scale5b_branch2a_b, 1.000000e-05f, scale5b_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale5b_branch2a, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res5b_branch2a_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res5b_branch2a_relu, res5b_branch2b_w, NULL, &conv_params, sizeof(conv_params), res5b_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res5b_branch2b, bn5b_branch2b_w, bn5b_branch2b_b, scale5b_branch2b_w, scale5b_branch2b_b, 1.000000e-05f, scale5b_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale5b_branch2b, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res5b_branch2b_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res5b_branch2b_relu, res5b_branch2c_w, NULL, &conv_params, sizeof(conv_params), res5b_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res5b_branch2c, bn5b_branch2c_w, bn5b_branch2c_b, scale5b_branch2c_w, scale5b_branch2c_b, 1.000000e-05f, scale5b_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxTensorAddNode(graph, res5a_relu, scale5b_branch2c, VX_CONVERT_POLICY_SATURATE, res5b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, res5b, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res5b_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res5b_relu, res5c_branch2a_w, NULL, &conv_params, sizeof(conv_params), res5c_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res5c_branch2a, bn5c_branch2a_w, bn5c_branch2a_b, scale5c_branch2a_w, scale5c_branch2a_b, 1.000000e-05f, scale5c_branch2a);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale5c_branch2a, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res5c_branch2a_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 1;
      conv_params.padding_y = 1;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res5c_branch2a_relu, res5c_branch2b_w, NULL, &conv_params, sizeof(conv_params), res5c_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res5c_branch2b, bn5c_branch2b_w, bn5c_branch2b_b, scale5c_branch2b_w, scale5c_branch2b_b, 1.000000e-05f, scale5c_branch2b);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, scale5c_branch2b, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res5c_branch2b_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_nn_convolution_params_t conv_params = { 0 };
      conv_params.padding_x = 0;
      conv_params.padding_y = 0;
      conv_params.overflow_policy = VX_CONVERT_POLICY_SATURATE;
      conv_params.rounding_policy = VX_ROUND_POLICY_TO_NEAREST_EVEN;
      conv_params.down_scale_size_rounding = VX_NN_DS_SIZE_ROUNDING_FLOOR;
      conv_params.dilation_x = 0;
      conv_params.dilation_y = 0;
      vx_node node = vxConvolutionLayer(graph, res5c_branch2b_relu, res5c_branch2c_w, NULL, &conv_params, sizeof(conv_params), res5c_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxBatchNormalizationLayer(graph, res5c_branch2c, bn5c_branch2c_w, bn5c_branch2c_b, scale5c_branch2c_w, scale5c_branch2c_b, 1.000000e-05f, scale5c_branch2c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxTensorAddNode(graph, res5b_relu, scale5c_branch2c, VX_CONVERT_POLICY_SATURATE, res5c);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxActivationLayer(graph, res5c, VX_NN_ACTIVATION_RELU, 0.0f, 0.0f, res5c_relu);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxPoolingLayer(graph, res5c_relu, VX_NN_POOLING_AVG, 7, 7, 0, 0, VX_ROUND_POLICY_TO_NEAREST_EVEN, pool5);
      ERROR_CHECK_OBJECT(node);
      vx_enum border_mode = 0;
      vx_scalar s_border_mode = vxCreateScalarWithSize(context, VX_TYPE_ENUM, &border_mode, sizeof(border_mode));
      ERROR_CHECK_OBJECT(s_border_mode);
      ERROR_CHECK_STATUS(vxSetParameterByIndex(node, 8, (vx_reference) s_border_mode));
      ERROR_CHECK_STATUS(vxReleaseScalar(&s_border_mode));
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxFullyConnectedLayer(graph, pool5, fc1000_w, fc1000_b, VX_CONVERT_POLICY_SATURATE, VX_ROUND_POLICY_TO_NEAREST_EVEN, fc1000);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    { vx_node node = vxSoftmaxLayer(graph, fc1000, prob);
      ERROR_CHECK_OBJECT(node);
      ERROR_CHECK_STATUS(vxReleaseNode(&node));
    }

    // release local tensors
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale_conv1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv1_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&pool1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2a_branch1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale2a_branch1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2a_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale2a_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2a_branch2a_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2a_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale2a_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2a_branch2b_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2a_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale2a_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2a_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2b_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale2b_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2b_branch2a_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2b_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale2b_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2b_branch2b_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2b_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale2b_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2b_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2c_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale2c_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2c_branch2a_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2c_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale2c_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2c_branch2b_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2c_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale2c_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2c_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3a_branch1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3a_branch1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3a_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3a_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3a_branch2a_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3a_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3a_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3a_branch2b_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3a_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3a_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3a_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3b_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3b_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3b_branch2a_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3b_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3b_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3b_branch2b_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3b_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3b_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3b_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3c_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3c_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3c_branch2a_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3c_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3c_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3c_branch2b_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3c_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3c_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3c_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3d_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3d_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3d_branch2a_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3d_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3d_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3d_branch2b_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3d_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3d_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3d));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3d_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4a_branch1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4a_branch1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4a_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4a_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4a_branch2a_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4a_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4a_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4a_branch2b_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4a_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4a_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4a_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4b_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4b_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4b_branch2a_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4b_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4b_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4b_branch2b_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4b_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4b_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4b_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4c_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4c_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4c_branch2a_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4c_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4c_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4c_branch2b_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4c_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4c_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4c_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4d_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4d_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4d_branch2a_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4d_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4d_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4d_branch2b_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4d_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4d_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4d));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4d_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4e_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4e_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4e_branch2a_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4e_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4e_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4e_branch2b_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4e_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4e_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4e));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4e_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4f_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4f_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4f_branch2a_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4f_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4f_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4f_branch2b_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4f_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4f_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4f));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4f_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5a_branch1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale5a_branch1));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5a_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale5a_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5a_branch2a_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5a_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale5a_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5a_branch2b_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5a_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale5a_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5a_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5b_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale5b_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5b_branch2a_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5b_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale5b_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5b_branch2b_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5b_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale5b_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5b_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5c_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale5c_branch2a));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5c_branch2a_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5c_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale5c_branch2b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5c_branch2b_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5c_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale5c_branch2c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5c));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5c_relu));
    ERROR_CHECK_STATUS(vxReleaseTensor(&pool5));
    ERROR_CHECK_STATUS(vxReleaseTensor(&fc1000));

    // release initializer tensors
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv1_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&conv1_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn_conv1_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn_conv1_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale_conv1_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale_conv1_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2a_branch1_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn2a_branch1_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn2a_branch1_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale2a_branch1_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale2a_branch1_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2a_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn2a_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn2a_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale2a_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale2a_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2a_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn2a_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn2a_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale2a_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale2a_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2a_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn2a_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn2a_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale2a_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale2a_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2b_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn2b_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn2b_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale2b_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale2b_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2b_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn2b_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn2b_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale2b_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale2b_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2b_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn2b_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn2b_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale2b_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale2b_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2c_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn2c_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn2c_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale2c_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale2c_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2c_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn2c_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn2c_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale2c_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale2c_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res2c_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn2c_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn2c_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale2c_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale2c_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3a_branch1_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn3a_branch1_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn3a_branch1_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3a_branch1_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3a_branch1_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3a_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn3a_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn3a_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3a_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3a_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3a_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn3a_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn3a_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3a_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3a_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3a_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn3a_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn3a_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3a_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3a_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3b_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn3b_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn3b_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3b_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3b_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3b_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn3b_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn3b_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3b_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3b_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3b_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn3b_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn3b_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3b_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3b_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3c_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn3c_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn3c_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3c_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3c_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3c_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn3c_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn3c_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3c_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3c_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3c_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn3c_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn3c_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3c_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3c_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3d_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn3d_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn3d_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3d_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3d_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3d_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn3d_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn3d_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3d_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3d_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res3d_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn3d_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn3d_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3d_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale3d_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4a_branch1_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4a_branch1_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4a_branch1_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4a_branch1_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4a_branch1_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4a_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4a_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4a_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4a_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4a_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4a_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4a_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4a_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4a_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4a_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4a_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4a_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4a_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4a_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4a_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4b_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4b_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4b_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4b_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4b_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4b_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4b_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4b_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4b_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4b_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4b_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4b_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4b_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4b_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4b_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4c_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4c_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4c_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4c_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4c_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4c_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4c_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4c_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4c_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4c_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4c_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4c_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4c_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4c_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4c_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4d_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4d_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4d_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4d_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4d_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4d_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4d_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4d_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4d_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4d_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4d_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4d_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4d_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4d_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4d_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4e_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4e_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4e_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4e_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4e_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4e_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4e_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4e_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4e_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4e_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4e_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4e_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4e_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4e_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4e_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4f_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4f_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4f_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4f_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4f_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4f_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4f_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4f_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4f_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4f_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res4f_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4f_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn4f_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4f_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale4f_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5a_branch1_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn5a_branch1_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn5a_branch1_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale5a_branch1_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale5a_branch1_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5a_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn5a_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn5a_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale5a_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale5a_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5a_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn5a_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn5a_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale5a_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale5a_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5a_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn5a_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn5a_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale5a_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale5a_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5b_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn5b_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn5b_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale5b_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale5b_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5b_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn5b_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn5b_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale5b_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale5b_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5b_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn5b_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn5b_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale5b_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale5b_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5c_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn5c_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn5c_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale5c_branch2a_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale5c_branch2a_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5c_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn5c_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn5c_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale5c_branch2b_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale5c_branch2b_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&res5c_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn5c_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&bn5c_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale5c_branch2c_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&scale5c_branch2c_b));
    ERROR_CHECK_STATUS(vxReleaseTensor(&fc1000_w));
    ERROR_CHECK_STATUS(vxReleaseTensor(&fc1000_b));

    return VX_SUCCESS;
}
